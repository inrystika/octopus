/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// WebDAVServiceStatus struct for WebDAVServiceStatus
type WebDAVServiceStatus struct {
	IsActive *bool `json:"is_active,omitempty"`
	Bindings []WebDAVBinding `json:"bindings,omitempty"`
}

// NewWebDAVServiceStatus instantiates a new WebDAVServiceStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebDAVServiceStatus() *WebDAVServiceStatus {
	this := WebDAVServiceStatus{}
	return &this
}

// NewWebDAVServiceStatusWithDefaults instantiates a new WebDAVServiceStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebDAVServiceStatusWithDefaults() *WebDAVServiceStatus {
	this := WebDAVServiceStatus{}
	return &this
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *WebDAVServiceStatus) GetIsActive() bool {
	if o == nil || o.IsActive == nil {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebDAVServiceStatus) GetIsActiveOk() (*bool, bool) {
	if o == nil || o.IsActive == nil {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *WebDAVServiceStatus) HasIsActive() bool {
	if o != nil && o.IsActive != nil {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *WebDAVServiceStatus) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetBindings returns the Bindings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WebDAVServiceStatus) GetBindings() []WebDAVBinding {
	if o == nil  {
		var ret []WebDAVBinding
		return ret
	}
	return o.Bindings
}

// GetBindingsOk returns a tuple with the Bindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WebDAVServiceStatus) GetBindingsOk() ([]WebDAVBinding, bool) {
	if o == nil || o.Bindings == nil {
		return nil, false
	}
	return o.Bindings, true
}

// HasBindings returns a boolean if a field has been set.
func (o *WebDAVServiceStatus) HasBindings() bool {
	if o != nil && o.Bindings != nil {
		return true
	}

	return false
}

// SetBindings gets a reference to the given []WebDAVBinding and assigns it to the Bindings field.
func (o *WebDAVServiceStatus) SetBindings(v []WebDAVBinding) {
	o.Bindings = v
}

func (o WebDAVServiceStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsActive != nil {
		toSerialize["is_active"] = o.IsActive
	}
	if o.Bindings != nil {
		toSerialize["bindings"] = o.Bindings
	}
	return json.Marshal(toSerialize)
}

type NullableWebDAVServiceStatus struct {
	value *WebDAVServiceStatus
	isSet bool
}

func (v NullableWebDAVServiceStatus) Get() *WebDAVServiceStatus {
	return v.value
}

func (v *NullableWebDAVServiceStatus) Set(val *WebDAVServiceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableWebDAVServiceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableWebDAVServiceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebDAVServiceStatus(val *WebDAVServiceStatus) *NullableWebDAVServiceStatus {
	return &NullableWebDAVServiceStatus{value: val, isSet: true}
}

func (v NullableWebDAVServiceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebDAVServiceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


