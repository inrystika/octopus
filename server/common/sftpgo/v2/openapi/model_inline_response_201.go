/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse201 struct for InlineResponse201
type InlineResponse201 struct {
	Mesage *string `json:"mesage,omitempty"`
	// generated API key
	Key *string `json:"key,omitempty"`
}

// NewInlineResponse201 instantiates a new InlineResponse201 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse201() *InlineResponse201 {
	this := InlineResponse201{}
	return &this
}

// NewInlineResponse201WithDefaults instantiates a new InlineResponse201 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse201WithDefaults() *InlineResponse201 {
	this := InlineResponse201{}
	return &this
}

// GetMesage returns the Mesage field value if set, zero value otherwise.
func (o *InlineResponse201) GetMesage() string {
	if o == nil || o.Mesage == nil {
		var ret string
		return ret
	}
	return *o.Mesage
}

// GetMesageOk returns a tuple with the Mesage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse201) GetMesageOk() (*string, bool) {
	if o == nil || o.Mesage == nil {
		return nil, false
	}
	return o.Mesage, true
}

// HasMesage returns a boolean if a field has been set.
func (o *InlineResponse201) HasMesage() bool {
	if o != nil && o.Mesage != nil {
		return true
	}

	return false
}

// SetMesage gets a reference to the given string and assigns it to the Mesage field.
func (o *InlineResponse201) SetMesage(v string) {
	o.Mesage = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *InlineResponse201) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse201) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *InlineResponse201) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *InlineResponse201) SetKey(v string) {
	o.Key = &v
}

func (o InlineResponse201) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Mesage != nil {
		toSerialize["mesage"] = o.Mesage
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse201 struct {
	value *InlineResponse201
	isSet bool
}

func (v NullableInlineResponse201) Get() *InlineResponse201 {
	return v.value
}

func (v *NullableInlineResponse201) Set(val *InlineResponse201) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse201) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse201) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse201(val *InlineResponse201) *NullableInlineResponse201 {
	return &NullableInlineResponse201{value: val, isSet: true}
}

func (v NullableInlineResponse201) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse201) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


