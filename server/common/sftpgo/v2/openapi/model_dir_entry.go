/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// DirEntry struct for DirEntry
type DirEntry struct {
	// name of the file (or subdirectory) described by the entry. This name is the final element of the path (the base name), not the entire path
	Name *string `json:"name,omitempty"`
	// file size, omitted for folders and non regular files
	Size *int64 `json:"size,omitempty"`
	// File mode and permission bits. More details here: https://golang.org/pkg/io/fs/#FileMode. Let's see some examples: - for a directory mode&2147483648 != 0 - for a symlink mode&134217728 != 0 - for a regular file mode&2401763328 == 0 
	Mode *int32 `json:"mode,omitempty"`
	LastModified *time.Time `json:"last_modified,omitempty"`
}

// NewDirEntry instantiates a new DirEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDirEntry() *DirEntry {
	this := DirEntry{}
	return &this
}

// NewDirEntryWithDefaults instantiates a new DirEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDirEntryWithDefaults() *DirEntry {
	this := DirEntry{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DirEntry) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirEntry) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DirEntry) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DirEntry) SetName(v string) {
	o.Name = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DirEntry) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirEntry) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DirEntry) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *DirEntry) SetSize(v int64) {
	o.Size = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *DirEntry) GetMode() int32 {
	if o == nil || o.Mode == nil {
		var ret int32
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirEntry) GetModeOk() (*int32, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *DirEntry) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given int32 and assigns it to the Mode field.
func (o *DirEntry) SetMode(v int32) {
	o.Mode = &v
}

// GetLastModified returns the LastModified field value if set, zero value otherwise.
func (o *DirEntry) GetLastModified() time.Time {
	if o == nil || o.LastModified == nil {
		var ret time.Time
		return ret
	}
	return *o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirEntry) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil || o.LastModified == nil {
		return nil, false
	}
	return o.LastModified, true
}

// HasLastModified returns a boolean if a field has been set.
func (o *DirEntry) HasLastModified() bool {
	if o != nil && o.LastModified != nil {
		return true
	}

	return false
}

// SetLastModified gets a reference to the given time.Time and assigns it to the LastModified field.
func (o *DirEntry) SetLastModified(v time.Time) {
	o.LastModified = &v
}

func (o DirEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.LastModified != nil {
		toSerialize["last_modified"] = o.LastModified
	}
	return json.Marshal(toSerialize)
}

type NullableDirEntry struct {
	value *DirEntry
	isSet bool
}

func (v NullableDirEntry) Get() *DirEntry {
	return v.value
}

func (v *NullableDirEntry) Set(val *DirEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableDirEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableDirEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirEntry(val *DirEntry) *NullableDirEntry {
	return &NullableDirEntry{value: val, isSet: true}
}

func (v NullableDirEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


