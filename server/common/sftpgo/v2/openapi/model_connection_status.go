/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ConnectionStatus struct for ConnectionStatus
type ConnectionStatus struct {
	// connected username
	Username *string `json:"username,omitempty"`
	// unique connection identifier
	ConnectionId *string `json:"connection_id,omitempty"`
	// client version
	ClientVersion *string `json:"client_version,omitempty"`
	// Remote address for the connected client
	RemoteAddress *string `json:"remote_address,omitempty"`
	// connection time as unix timestamp in milliseconds
	ConnectionTime *int64 `json:"connection_time,omitempty"`
	// Last SSH/FTP command or WebDAV method
	Command *string `json:"command,omitempty"`
	// last client activity as unix timestamp in milliseconds
	LastActivity *int64 `json:"last_activity,omitempty"`
	Protocol *string `json:"protocol,omitempty"`
	ActiveTransfers []Transfer `json:"active_transfers,omitempty"`
}

// NewConnectionStatus instantiates a new ConnectionStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionStatus() *ConnectionStatus {
	this := ConnectionStatus{}
	return &this
}

// NewConnectionStatusWithDefaults instantiates a new ConnectionStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionStatusWithDefaults() *ConnectionStatus {
	this := ConnectionStatus{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ConnectionStatus) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatus) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ConnectionStatus) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ConnectionStatus) SetUsername(v string) {
	o.Username = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *ConnectionStatus) GetConnectionId() string {
	if o == nil || o.ConnectionId == nil {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatus) GetConnectionIdOk() (*string, bool) {
	if o == nil || o.ConnectionId == nil {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *ConnectionStatus) HasConnectionId() bool {
	if o != nil && o.ConnectionId != nil {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *ConnectionStatus) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetClientVersion returns the ClientVersion field value if set, zero value otherwise.
func (o *ConnectionStatus) GetClientVersion() string {
	if o == nil || o.ClientVersion == nil {
		var ret string
		return ret
	}
	return *o.ClientVersion
}

// GetClientVersionOk returns a tuple with the ClientVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatus) GetClientVersionOk() (*string, bool) {
	if o == nil || o.ClientVersion == nil {
		return nil, false
	}
	return o.ClientVersion, true
}

// HasClientVersion returns a boolean if a field has been set.
func (o *ConnectionStatus) HasClientVersion() bool {
	if o != nil && o.ClientVersion != nil {
		return true
	}

	return false
}

// SetClientVersion gets a reference to the given string and assigns it to the ClientVersion field.
func (o *ConnectionStatus) SetClientVersion(v string) {
	o.ClientVersion = &v
}

// GetRemoteAddress returns the RemoteAddress field value if set, zero value otherwise.
func (o *ConnectionStatus) GetRemoteAddress() string {
	if o == nil || o.RemoteAddress == nil {
		var ret string
		return ret
	}
	return *o.RemoteAddress
}

// GetRemoteAddressOk returns a tuple with the RemoteAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatus) GetRemoteAddressOk() (*string, bool) {
	if o == nil || o.RemoteAddress == nil {
		return nil, false
	}
	return o.RemoteAddress, true
}

// HasRemoteAddress returns a boolean if a field has been set.
func (o *ConnectionStatus) HasRemoteAddress() bool {
	if o != nil && o.RemoteAddress != nil {
		return true
	}

	return false
}

// SetRemoteAddress gets a reference to the given string and assigns it to the RemoteAddress field.
func (o *ConnectionStatus) SetRemoteAddress(v string) {
	o.RemoteAddress = &v
}

// GetConnectionTime returns the ConnectionTime field value if set, zero value otherwise.
func (o *ConnectionStatus) GetConnectionTime() int64 {
	if o == nil || o.ConnectionTime == nil {
		var ret int64
		return ret
	}
	return *o.ConnectionTime
}

// GetConnectionTimeOk returns a tuple with the ConnectionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatus) GetConnectionTimeOk() (*int64, bool) {
	if o == nil || o.ConnectionTime == nil {
		return nil, false
	}
	return o.ConnectionTime, true
}

// HasConnectionTime returns a boolean if a field has been set.
func (o *ConnectionStatus) HasConnectionTime() bool {
	if o != nil && o.ConnectionTime != nil {
		return true
	}

	return false
}

// SetConnectionTime gets a reference to the given int64 and assigns it to the ConnectionTime field.
func (o *ConnectionStatus) SetConnectionTime(v int64) {
	o.ConnectionTime = &v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *ConnectionStatus) GetCommand() string {
	if o == nil || o.Command == nil {
		var ret string
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatus) GetCommandOk() (*string, bool) {
	if o == nil || o.Command == nil {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *ConnectionStatus) HasCommand() bool {
	if o != nil && o.Command != nil {
		return true
	}

	return false
}

// SetCommand gets a reference to the given string and assigns it to the Command field.
func (o *ConnectionStatus) SetCommand(v string) {
	o.Command = &v
}

// GetLastActivity returns the LastActivity field value if set, zero value otherwise.
func (o *ConnectionStatus) GetLastActivity() int64 {
	if o == nil || o.LastActivity == nil {
		var ret int64
		return ret
	}
	return *o.LastActivity
}

// GetLastActivityOk returns a tuple with the LastActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatus) GetLastActivityOk() (*int64, bool) {
	if o == nil || o.LastActivity == nil {
		return nil, false
	}
	return o.LastActivity, true
}

// HasLastActivity returns a boolean if a field has been set.
func (o *ConnectionStatus) HasLastActivity() bool {
	if o != nil && o.LastActivity != nil {
		return true
	}

	return false
}

// SetLastActivity gets a reference to the given int64 and assigns it to the LastActivity field.
func (o *ConnectionStatus) SetLastActivity(v int64) {
	o.LastActivity = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *ConnectionStatus) GetProtocol() string {
	if o == nil || o.Protocol == nil {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatus) GetProtocolOk() (*string, bool) {
	if o == nil || o.Protocol == nil {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *ConnectionStatus) HasProtocol() bool {
	if o != nil && o.Protocol != nil {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *ConnectionStatus) SetProtocol(v string) {
	o.Protocol = &v
}

// GetActiveTransfers returns the ActiveTransfers field value if set, zero value otherwise.
func (o *ConnectionStatus) GetActiveTransfers() []Transfer {
	if o == nil || o.ActiveTransfers == nil {
		var ret []Transfer
		return ret
	}
	return o.ActiveTransfers
}

// GetActiveTransfersOk returns a tuple with the ActiveTransfers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatus) GetActiveTransfersOk() ([]Transfer, bool) {
	if o == nil || o.ActiveTransfers == nil {
		return nil, false
	}
	return o.ActiveTransfers, true
}

// HasActiveTransfers returns a boolean if a field has been set.
func (o *ConnectionStatus) HasActiveTransfers() bool {
	if o != nil && o.ActiveTransfers != nil {
		return true
	}

	return false
}

// SetActiveTransfers gets a reference to the given []Transfer and assigns it to the ActiveTransfers field.
func (o *ConnectionStatus) SetActiveTransfers(v []Transfer) {
	o.ActiveTransfers = v
}

func (o ConnectionStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.ConnectionId != nil {
		toSerialize["connection_id"] = o.ConnectionId
	}
	if o.ClientVersion != nil {
		toSerialize["client_version"] = o.ClientVersion
	}
	if o.RemoteAddress != nil {
		toSerialize["remote_address"] = o.RemoteAddress
	}
	if o.ConnectionTime != nil {
		toSerialize["connection_time"] = o.ConnectionTime
	}
	if o.Command != nil {
		toSerialize["command"] = o.Command
	}
	if o.LastActivity != nil {
		toSerialize["last_activity"] = o.LastActivity
	}
	if o.Protocol != nil {
		toSerialize["protocol"] = o.Protocol
	}
	if o.ActiveTransfers != nil {
		toSerialize["active_transfers"] = o.ActiveTransfers
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionStatus struct {
	value *ConnectionStatus
	isSet bool
}

func (v NullableConnectionStatus) Get() *ConnectionStatus {
	return v.value
}

func (v *NullableConnectionStatus) Set(val *ConnectionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionStatus(val *ConnectionStatus) *NullableConnectionStatus {
	return &NullableConnectionStatus{value: val, isSet: true}
}

func (v NullableConnectionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


