/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AuthAPIKey struct for AuthAPIKey
type AuthAPIKey struct {
	// unique key identifier
	Id *string `json:"id,omitempty"`
	// User friendly key name
	Name *string `json:"name,omitempty"`
	// We store the hash of the key. This is just like a password. For security reasons this field is omitted when you search/get API keys
	Key *string `json:"key,omitempty"`
	Scope *AuthAPIKeyScope `json:"scope,omitempty"`
	// creation time as unix timestamp in milliseconds
	CreatedAt *int64 `json:"created_at,omitempty"`
	// last update time as unix timestamp in milliseconds
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// last use time as unix timestamp in milliseconds. It is saved at most once every 10 minutes
	LastUseAt *int64 `json:"last_use_at,omitempty"`
	// expiration time as unix timestamp in milliseconds
	ExpiresAt *int64 `json:"expires_at,omitempty"`
	// optional description
	Description *string `json:"description,omitempty"`
	// username associated with this API key. If empty and the scope is \"user scope\" the key can impersonate any user
	User *string `json:"user,omitempty"`
	// admin associated with this API key. If empty and the scope is \"admin scope\" the key can impersonate any admin
	Admin *string `json:"admin,omitempty"`
}

// NewAuthAPIKey instantiates a new AuthAPIKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthAPIKey() *AuthAPIKey {
	this := AuthAPIKey{}
	return &this
}

// NewAuthAPIKeyWithDefaults instantiates a new AuthAPIKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthAPIKeyWithDefaults() *AuthAPIKey {
	this := AuthAPIKey{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuthAPIKey) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthAPIKey) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuthAPIKey) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuthAPIKey) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AuthAPIKey) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthAPIKey) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AuthAPIKey) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AuthAPIKey) SetName(v string) {
	o.Name = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *AuthAPIKey) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthAPIKey) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *AuthAPIKey) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *AuthAPIKey) SetKey(v string) {
	o.Key = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *AuthAPIKey) GetScope() AuthAPIKeyScope {
	if o == nil || o.Scope == nil {
		var ret AuthAPIKeyScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthAPIKey) GetScopeOk() (*AuthAPIKeyScope, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *AuthAPIKey) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given AuthAPIKeyScope and assigns it to the Scope field.
func (o *AuthAPIKey) SetScope(v AuthAPIKeyScope) {
	o.Scope = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AuthAPIKey) GetCreatedAt() int64 {
	if o == nil || o.CreatedAt == nil {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthAPIKey) GetCreatedAtOk() (*int64, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AuthAPIKey) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *AuthAPIKey) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AuthAPIKey) GetUpdatedAt() int64 {
	if o == nil || o.UpdatedAt == nil {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthAPIKey) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AuthAPIKey) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *AuthAPIKey) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetLastUseAt returns the LastUseAt field value if set, zero value otherwise.
func (o *AuthAPIKey) GetLastUseAt() int64 {
	if o == nil || o.LastUseAt == nil {
		var ret int64
		return ret
	}
	return *o.LastUseAt
}

// GetLastUseAtOk returns a tuple with the LastUseAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthAPIKey) GetLastUseAtOk() (*int64, bool) {
	if o == nil || o.LastUseAt == nil {
		return nil, false
	}
	return o.LastUseAt, true
}

// HasLastUseAt returns a boolean if a field has been set.
func (o *AuthAPIKey) HasLastUseAt() bool {
	if o != nil && o.LastUseAt != nil {
		return true
	}

	return false
}

// SetLastUseAt gets a reference to the given int64 and assigns it to the LastUseAt field.
func (o *AuthAPIKey) SetLastUseAt(v int64) {
	o.LastUseAt = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *AuthAPIKey) GetExpiresAt() int64 {
	if o == nil || o.ExpiresAt == nil {
		var ret int64
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthAPIKey) GetExpiresAtOk() (*int64, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *AuthAPIKey) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given int64 and assigns it to the ExpiresAt field.
func (o *AuthAPIKey) SetExpiresAt(v int64) {
	o.ExpiresAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AuthAPIKey) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthAPIKey) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AuthAPIKey) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AuthAPIKey) SetDescription(v string) {
	o.Description = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *AuthAPIKey) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthAPIKey) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *AuthAPIKey) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *AuthAPIKey) SetUser(v string) {
	o.User = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *AuthAPIKey) GetAdmin() string {
	if o == nil || o.Admin == nil {
		var ret string
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthAPIKey) GetAdminOk() (*string, bool) {
	if o == nil || o.Admin == nil {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *AuthAPIKey) HasAdmin() bool {
	if o != nil && o.Admin != nil {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given string and assigns it to the Admin field.
func (o *AuthAPIKey) SetAdmin(v string) {
	o.Admin = &v
}

func (o AuthAPIKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.LastUseAt != nil {
		toSerialize["last_use_at"] = o.LastUseAt
	}
	if o.ExpiresAt != nil {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Admin != nil {
		toSerialize["admin"] = o.Admin
	}
	return json.Marshal(toSerialize)
}

type NullableAuthAPIKey struct {
	value *AuthAPIKey
	isSet bool
}

func (v NullableAuthAPIKey) Get() *AuthAPIKey {
	return v.value
}

func (v *NullableAuthAPIKey) Set(val *AuthAPIKey) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthAPIKey) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthAPIKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthAPIKey(val *AuthAPIKey) *NullableAuthAPIKey {
	return &NullableAuthAPIKey{value: val, isSet: true}
}

func (v NullableAuthAPIKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthAPIKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


