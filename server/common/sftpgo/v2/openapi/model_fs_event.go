/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// FsEvent struct for FsEvent
type FsEvent struct {
	Id *string `json:"id,omitempty"`
	// unix timestamp in nanoseconds
	Timestamp *int64 `json:"timestamp,omitempty"`
	Action *FsEventAction `json:"action,omitempty"`
	Username *string `json:"username,omitempty"`
	FsPath *string `json:"fs_path,omitempty"`
	FsTargetPath *string `json:"fs_target_path,omitempty"`
	VirtualPath *string `json:"virtual_path,omitempty"`
	VirtualTargetPath *string `json:"virtual_target_path,omitempty"`
	SshCmd *string `json:"ssh_cmd,omitempty"`
	FileSize *int64 `json:"file_size,omitempty"`
	Status *FsEventStatus `json:"status,omitempty"`
	Protocol *EventProtocols `json:"protocol,omitempty"`
	Ip *string `json:"ip,omitempty"`
	SessionId *string `json:"session_id,omitempty"`
	FsProvider *FsProviders `json:"fs_provider,omitempty"`
	Bucket *string `json:"bucket,omitempty"`
	Endpoint *string `json:"endpoint,omitempty"`
	OpenFlags *string `json:"open_flags,omitempty"`
	InstanceId *string `json:"instance_id,omitempty"`
}

// NewFsEvent instantiates a new FsEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFsEvent() *FsEvent {
	this := FsEvent{}
	return &this
}

// NewFsEventWithDefaults instantiates a new FsEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFsEventWithDefaults() *FsEvent {
	this := FsEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FsEvent) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FsEvent) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FsEvent) SetId(v string) {
	o.Id = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *FsEvent) GetTimestamp() int64 {
	if o == nil || o.Timestamp == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetTimestampOk() (*int64, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *FsEvent) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *FsEvent) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *FsEvent) GetAction() FsEventAction {
	if o == nil || o.Action == nil {
		var ret FsEventAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetActionOk() (*FsEventAction, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *FsEvent) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given FsEventAction and assigns it to the Action field.
func (o *FsEvent) SetAction(v FsEventAction) {
	o.Action = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *FsEvent) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *FsEvent) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *FsEvent) SetUsername(v string) {
	o.Username = &v
}

// GetFsPath returns the FsPath field value if set, zero value otherwise.
func (o *FsEvent) GetFsPath() string {
	if o == nil || o.FsPath == nil {
		var ret string
		return ret
	}
	return *o.FsPath
}

// GetFsPathOk returns a tuple with the FsPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetFsPathOk() (*string, bool) {
	if o == nil || o.FsPath == nil {
		return nil, false
	}
	return o.FsPath, true
}

// HasFsPath returns a boolean if a field has been set.
func (o *FsEvent) HasFsPath() bool {
	if o != nil && o.FsPath != nil {
		return true
	}

	return false
}

// SetFsPath gets a reference to the given string and assigns it to the FsPath field.
func (o *FsEvent) SetFsPath(v string) {
	o.FsPath = &v
}

// GetFsTargetPath returns the FsTargetPath field value if set, zero value otherwise.
func (o *FsEvent) GetFsTargetPath() string {
	if o == nil || o.FsTargetPath == nil {
		var ret string
		return ret
	}
	return *o.FsTargetPath
}

// GetFsTargetPathOk returns a tuple with the FsTargetPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetFsTargetPathOk() (*string, bool) {
	if o == nil || o.FsTargetPath == nil {
		return nil, false
	}
	return o.FsTargetPath, true
}

// HasFsTargetPath returns a boolean if a field has been set.
func (o *FsEvent) HasFsTargetPath() bool {
	if o != nil && o.FsTargetPath != nil {
		return true
	}

	return false
}

// SetFsTargetPath gets a reference to the given string and assigns it to the FsTargetPath field.
func (o *FsEvent) SetFsTargetPath(v string) {
	o.FsTargetPath = &v
}

// GetVirtualPath returns the VirtualPath field value if set, zero value otherwise.
func (o *FsEvent) GetVirtualPath() string {
	if o == nil || o.VirtualPath == nil {
		var ret string
		return ret
	}
	return *o.VirtualPath
}

// GetVirtualPathOk returns a tuple with the VirtualPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetVirtualPathOk() (*string, bool) {
	if o == nil || o.VirtualPath == nil {
		return nil, false
	}
	return o.VirtualPath, true
}

// HasVirtualPath returns a boolean if a field has been set.
func (o *FsEvent) HasVirtualPath() bool {
	if o != nil && o.VirtualPath != nil {
		return true
	}

	return false
}

// SetVirtualPath gets a reference to the given string and assigns it to the VirtualPath field.
func (o *FsEvent) SetVirtualPath(v string) {
	o.VirtualPath = &v
}

// GetVirtualTargetPath returns the VirtualTargetPath field value if set, zero value otherwise.
func (o *FsEvent) GetVirtualTargetPath() string {
	if o == nil || o.VirtualTargetPath == nil {
		var ret string
		return ret
	}
	return *o.VirtualTargetPath
}

// GetVirtualTargetPathOk returns a tuple with the VirtualTargetPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetVirtualTargetPathOk() (*string, bool) {
	if o == nil || o.VirtualTargetPath == nil {
		return nil, false
	}
	return o.VirtualTargetPath, true
}

// HasVirtualTargetPath returns a boolean if a field has been set.
func (o *FsEvent) HasVirtualTargetPath() bool {
	if o != nil && o.VirtualTargetPath != nil {
		return true
	}

	return false
}

// SetVirtualTargetPath gets a reference to the given string and assigns it to the VirtualTargetPath field.
func (o *FsEvent) SetVirtualTargetPath(v string) {
	o.VirtualTargetPath = &v
}

// GetSshCmd returns the SshCmd field value if set, zero value otherwise.
func (o *FsEvent) GetSshCmd() string {
	if o == nil || o.SshCmd == nil {
		var ret string
		return ret
	}
	return *o.SshCmd
}

// GetSshCmdOk returns a tuple with the SshCmd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetSshCmdOk() (*string, bool) {
	if o == nil || o.SshCmd == nil {
		return nil, false
	}
	return o.SshCmd, true
}

// HasSshCmd returns a boolean if a field has been set.
func (o *FsEvent) HasSshCmd() bool {
	if o != nil && o.SshCmd != nil {
		return true
	}

	return false
}

// SetSshCmd gets a reference to the given string and assigns it to the SshCmd field.
func (o *FsEvent) SetSshCmd(v string) {
	o.SshCmd = &v
}

// GetFileSize returns the FileSize field value if set, zero value otherwise.
func (o *FsEvent) GetFileSize() int64 {
	if o == nil || o.FileSize == nil {
		var ret int64
		return ret
	}
	return *o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetFileSizeOk() (*int64, bool) {
	if o == nil || o.FileSize == nil {
		return nil, false
	}
	return o.FileSize, true
}

// HasFileSize returns a boolean if a field has been set.
func (o *FsEvent) HasFileSize() bool {
	if o != nil && o.FileSize != nil {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given int64 and assigns it to the FileSize field.
func (o *FsEvent) SetFileSize(v int64) {
	o.FileSize = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FsEvent) GetStatus() FsEventStatus {
	if o == nil || o.Status == nil {
		var ret FsEventStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetStatusOk() (*FsEventStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FsEvent) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given FsEventStatus and assigns it to the Status field.
func (o *FsEvent) SetStatus(v FsEventStatus) {
	o.Status = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *FsEvent) GetProtocol() EventProtocols {
	if o == nil || o.Protocol == nil {
		var ret EventProtocols
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetProtocolOk() (*EventProtocols, bool) {
	if o == nil || o.Protocol == nil {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *FsEvent) HasProtocol() bool {
	if o != nil && o.Protocol != nil {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given EventProtocols and assigns it to the Protocol field.
func (o *FsEvent) SetProtocol(v EventProtocols) {
	o.Protocol = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *FsEvent) GetIp() string {
	if o == nil || o.Ip == nil {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetIpOk() (*string, bool) {
	if o == nil || o.Ip == nil {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *FsEvent) HasIp() bool {
	if o != nil && o.Ip != nil {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *FsEvent) SetIp(v string) {
	o.Ip = &v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *FsEvent) GetSessionId() string {
	if o == nil || o.SessionId == nil {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetSessionIdOk() (*string, bool) {
	if o == nil || o.SessionId == nil {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *FsEvent) HasSessionId() bool {
	if o != nil && o.SessionId != nil {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *FsEvent) SetSessionId(v string) {
	o.SessionId = &v
}

// GetFsProvider returns the FsProvider field value if set, zero value otherwise.
func (o *FsEvent) GetFsProvider() FsProviders {
	if o == nil || o.FsProvider == nil {
		var ret FsProviders
		return ret
	}
	return *o.FsProvider
}

// GetFsProviderOk returns a tuple with the FsProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetFsProviderOk() (*FsProviders, bool) {
	if o == nil || o.FsProvider == nil {
		return nil, false
	}
	return o.FsProvider, true
}

// HasFsProvider returns a boolean if a field has been set.
func (o *FsEvent) HasFsProvider() bool {
	if o != nil && o.FsProvider != nil {
		return true
	}

	return false
}

// SetFsProvider gets a reference to the given FsProviders and assigns it to the FsProvider field.
func (o *FsEvent) SetFsProvider(v FsProviders) {
	o.FsProvider = &v
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *FsEvent) GetBucket() string {
	if o == nil || o.Bucket == nil {
		var ret string
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetBucketOk() (*string, bool) {
	if o == nil || o.Bucket == nil {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *FsEvent) HasBucket() bool {
	if o != nil && o.Bucket != nil {
		return true
	}

	return false
}

// SetBucket gets a reference to the given string and assigns it to the Bucket field.
func (o *FsEvent) SetBucket(v string) {
	o.Bucket = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *FsEvent) GetEndpoint() string {
	if o == nil || o.Endpoint == nil {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetEndpointOk() (*string, bool) {
	if o == nil || o.Endpoint == nil {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *FsEvent) HasEndpoint() bool {
	if o != nil && o.Endpoint != nil {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *FsEvent) SetEndpoint(v string) {
	o.Endpoint = &v
}

// GetOpenFlags returns the OpenFlags field value if set, zero value otherwise.
func (o *FsEvent) GetOpenFlags() string {
	if o == nil || o.OpenFlags == nil {
		var ret string
		return ret
	}
	return *o.OpenFlags
}

// GetOpenFlagsOk returns a tuple with the OpenFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetOpenFlagsOk() (*string, bool) {
	if o == nil || o.OpenFlags == nil {
		return nil, false
	}
	return o.OpenFlags, true
}

// HasOpenFlags returns a boolean if a field has been set.
func (o *FsEvent) HasOpenFlags() bool {
	if o != nil && o.OpenFlags != nil {
		return true
	}

	return false
}

// SetOpenFlags gets a reference to the given string and assigns it to the OpenFlags field.
func (o *FsEvent) SetOpenFlags(v string) {
	o.OpenFlags = &v
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *FsEvent) GetInstanceId() string {
	if o == nil || o.InstanceId == nil {
		var ret string
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsEvent) GetInstanceIdOk() (*string, bool) {
	if o == nil || o.InstanceId == nil {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *FsEvent) HasInstanceId() bool {
	if o != nil && o.InstanceId != nil {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given string and assigns it to the InstanceId field.
func (o *FsEvent) SetInstanceId(v string) {
	o.InstanceId = &v
}

func (o FsEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.FsPath != nil {
		toSerialize["fs_path"] = o.FsPath
	}
	if o.FsTargetPath != nil {
		toSerialize["fs_target_path"] = o.FsTargetPath
	}
	if o.VirtualPath != nil {
		toSerialize["virtual_path"] = o.VirtualPath
	}
	if o.VirtualTargetPath != nil {
		toSerialize["virtual_target_path"] = o.VirtualTargetPath
	}
	if o.SshCmd != nil {
		toSerialize["ssh_cmd"] = o.SshCmd
	}
	if o.FileSize != nil {
		toSerialize["file_size"] = o.FileSize
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Protocol != nil {
		toSerialize["protocol"] = o.Protocol
	}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}
	if o.SessionId != nil {
		toSerialize["session_id"] = o.SessionId
	}
	if o.FsProvider != nil {
		toSerialize["fs_provider"] = o.FsProvider
	}
	if o.Bucket != nil {
		toSerialize["bucket"] = o.Bucket
	}
	if o.Endpoint != nil {
		toSerialize["endpoint"] = o.Endpoint
	}
	if o.OpenFlags != nil {
		toSerialize["open_flags"] = o.OpenFlags
	}
	if o.InstanceId != nil {
		toSerialize["instance_id"] = o.InstanceId
	}
	return json.Marshal(toSerialize)
}

type NullableFsEvent struct {
	value *FsEvent
	isSet bool
}

func (v NullableFsEvent) Get() *FsEvent {
	return v.value
}

func (v *NullableFsEvent) Set(val *FsEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableFsEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableFsEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFsEvent(val *FsEvent) *NullableFsEvent {
	return &NullableFsEvent{value: val, isSet: true}
}

func (v NullableFsEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFsEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


