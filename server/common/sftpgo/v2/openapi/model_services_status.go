/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ServicesStatus struct for ServicesStatus
type ServicesStatus struct {
	Ssh *SSHServiceStatus `json:"ssh,omitempty"`
	Ftp *FTPServiceStatus `json:"ftp,omitempty"`
	Webdav *WebDAVServiceStatus `json:"webdav,omitempty"`
	DataProvider *DataProviderStatus `json:"data_provider,omitempty"`
	Defender *ServicesStatusDefender `json:"defender,omitempty"`
	Mfa *MFAStatus `json:"mfa,omitempty"`
}

// NewServicesStatus instantiates a new ServicesStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesStatus() *ServicesStatus {
	this := ServicesStatus{}
	return &this
}

// NewServicesStatusWithDefaults instantiates a new ServicesStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesStatusWithDefaults() *ServicesStatus {
	this := ServicesStatus{}
	return &this
}

// GetSsh returns the Ssh field value if set, zero value otherwise.
func (o *ServicesStatus) GetSsh() SSHServiceStatus {
	if o == nil || o.Ssh == nil {
		var ret SSHServiceStatus
		return ret
	}
	return *o.Ssh
}

// GetSshOk returns a tuple with the Ssh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesStatus) GetSshOk() (*SSHServiceStatus, bool) {
	if o == nil || o.Ssh == nil {
		return nil, false
	}
	return o.Ssh, true
}

// HasSsh returns a boolean if a field has been set.
func (o *ServicesStatus) HasSsh() bool {
	if o != nil && o.Ssh != nil {
		return true
	}

	return false
}

// SetSsh gets a reference to the given SSHServiceStatus and assigns it to the Ssh field.
func (o *ServicesStatus) SetSsh(v SSHServiceStatus) {
	o.Ssh = &v
}

// GetFtp returns the Ftp field value if set, zero value otherwise.
func (o *ServicesStatus) GetFtp() FTPServiceStatus {
	if o == nil || o.Ftp == nil {
		var ret FTPServiceStatus
		return ret
	}
	return *o.Ftp
}

// GetFtpOk returns a tuple with the Ftp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesStatus) GetFtpOk() (*FTPServiceStatus, bool) {
	if o == nil || o.Ftp == nil {
		return nil, false
	}
	return o.Ftp, true
}

// HasFtp returns a boolean if a field has been set.
func (o *ServicesStatus) HasFtp() bool {
	if o != nil && o.Ftp != nil {
		return true
	}

	return false
}

// SetFtp gets a reference to the given FTPServiceStatus and assigns it to the Ftp field.
func (o *ServicesStatus) SetFtp(v FTPServiceStatus) {
	o.Ftp = &v
}

// GetWebdav returns the Webdav field value if set, zero value otherwise.
func (o *ServicesStatus) GetWebdav() WebDAVServiceStatus {
	if o == nil || o.Webdav == nil {
		var ret WebDAVServiceStatus
		return ret
	}
	return *o.Webdav
}

// GetWebdavOk returns a tuple with the Webdav field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesStatus) GetWebdavOk() (*WebDAVServiceStatus, bool) {
	if o == nil || o.Webdav == nil {
		return nil, false
	}
	return o.Webdav, true
}

// HasWebdav returns a boolean if a field has been set.
func (o *ServicesStatus) HasWebdav() bool {
	if o != nil && o.Webdav != nil {
		return true
	}

	return false
}

// SetWebdav gets a reference to the given WebDAVServiceStatus and assigns it to the Webdav field.
func (o *ServicesStatus) SetWebdav(v WebDAVServiceStatus) {
	o.Webdav = &v
}

// GetDataProvider returns the DataProvider field value if set, zero value otherwise.
func (o *ServicesStatus) GetDataProvider() DataProviderStatus {
	if o == nil || o.DataProvider == nil {
		var ret DataProviderStatus
		return ret
	}
	return *o.DataProvider
}

// GetDataProviderOk returns a tuple with the DataProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesStatus) GetDataProviderOk() (*DataProviderStatus, bool) {
	if o == nil || o.DataProvider == nil {
		return nil, false
	}
	return o.DataProvider, true
}

// HasDataProvider returns a boolean if a field has been set.
func (o *ServicesStatus) HasDataProvider() bool {
	if o != nil && o.DataProvider != nil {
		return true
	}

	return false
}

// SetDataProvider gets a reference to the given DataProviderStatus and assigns it to the DataProvider field.
func (o *ServicesStatus) SetDataProvider(v DataProviderStatus) {
	o.DataProvider = &v
}

// GetDefender returns the Defender field value if set, zero value otherwise.
func (o *ServicesStatus) GetDefender() ServicesStatusDefender {
	if o == nil || o.Defender == nil {
		var ret ServicesStatusDefender
		return ret
	}
	return *o.Defender
}

// GetDefenderOk returns a tuple with the Defender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesStatus) GetDefenderOk() (*ServicesStatusDefender, bool) {
	if o == nil || o.Defender == nil {
		return nil, false
	}
	return o.Defender, true
}

// HasDefender returns a boolean if a field has been set.
func (o *ServicesStatus) HasDefender() bool {
	if o != nil && o.Defender != nil {
		return true
	}

	return false
}

// SetDefender gets a reference to the given ServicesStatusDefender and assigns it to the Defender field.
func (o *ServicesStatus) SetDefender(v ServicesStatusDefender) {
	o.Defender = &v
}

// GetMfa returns the Mfa field value if set, zero value otherwise.
func (o *ServicesStatus) GetMfa() MFAStatus {
	if o == nil || o.Mfa == nil {
		var ret MFAStatus
		return ret
	}
	return *o.Mfa
}

// GetMfaOk returns a tuple with the Mfa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesStatus) GetMfaOk() (*MFAStatus, bool) {
	if o == nil || o.Mfa == nil {
		return nil, false
	}
	return o.Mfa, true
}

// HasMfa returns a boolean if a field has been set.
func (o *ServicesStatus) HasMfa() bool {
	if o != nil && o.Mfa != nil {
		return true
	}

	return false
}

// SetMfa gets a reference to the given MFAStatus and assigns it to the Mfa field.
func (o *ServicesStatus) SetMfa(v MFAStatus) {
	o.Mfa = &v
}

func (o ServicesStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ssh != nil {
		toSerialize["ssh"] = o.Ssh
	}
	if o.Ftp != nil {
		toSerialize["ftp"] = o.Ftp
	}
	if o.Webdav != nil {
		toSerialize["webdav"] = o.Webdav
	}
	if o.DataProvider != nil {
		toSerialize["data_provider"] = o.DataProvider
	}
	if o.Defender != nil {
		toSerialize["defender"] = o.Defender
	}
	if o.Mfa != nil {
		toSerialize["mfa"] = o.Mfa
	}
	return json.Marshal(toSerialize)
}

type NullableServicesStatus struct {
	value *ServicesStatus
	isSet bool
}

func (v NullableServicesStatus) Get() *ServicesStatus {
	return v.value
}

func (v *NullableServicesStatus) Set(val *ServicesStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesStatus(val *ServicesStatus) *NullableServicesStatus {
	return &NullableServicesStatus{value: val, isSet: true}
}

func (v NullableServicesStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


