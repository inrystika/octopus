/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// MFAProtocols Protocols:   * `SSH` - includes both SFTP and SSH commands   * `FTP` - plain FTP and FTPES/FTPS   * `HTTP` - WebClient/REST API 
type MFAProtocols string

// List of MFAProtocols
const (
	MFAPROTOCOLS_SSH MFAProtocols = "SSH"
	MFAPROTOCOLS_FTP MFAProtocols = "FTP"
	MFAPROTOCOLS_HTTP MFAProtocols = "HTTP"
)

// All allowed values of MFAProtocols enum
var AllowedMFAProtocolsEnumValues = []MFAProtocols{
	"SSH",
	"FTP",
	"HTTP",
}

func (v *MFAProtocols) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MFAProtocols(value)
	for _, existing := range AllowedMFAProtocolsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MFAProtocols", value)
}

// NewMFAProtocolsFromValue returns a pointer to a valid MFAProtocols
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMFAProtocolsFromValue(v string) (*MFAProtocols, error) {
	ev := MFAProtocols(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MFAProtocols: valid values are %v", v, AllowedMFAProtocolsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MFAProtocols) IsValid() bool {
	for _, existing := range AllowedMFAProtocolsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MFAProtocols value
func (v MFAProtocols) Ptr() *MFAProtocols {
	return &v
}

type NullableMFAProtocols struct {
	value *MFAProtocols
	isSet bool
}

func (v NullableMFAProtocols) Get() *MFAProtocols {
	return v.value
}

func (v *NullableMFAProtocols) Set(val *MFAProtocols) {
	v.value = val
	v.isSet = true
}

func (v NullableMFAProtocols) IsSet() bool {
	return v.isSet
}

func (v *NullableMFAProtocols) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMFAProtocols(val *MFAProtocols) *NullableMFAProtocols {
	return &NullableMFAProtocols{value: val, isSet: true}
}

func (v NullableMFAProtocols) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMFAProtocols) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

