/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// FTPPassivePortRange struct for FTPPassivePortRange
type FTPPassivePortRange struct {
	Start *int32 `json:"start,omitempty"`
	End *int32 `json:"end,omitempty"`
}

// NewFTPPassivePortRange instantiates a new FTPPassivePortRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFTPPassivePortRange() *FTPPassivePortRange {
	this := FTPPassivePortRange{}
	return &this
}

// NewFTPPassivePortRangeWithDefaults instantiates a new FTPPassivePortRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFTPPassivePortRangeWithDefaults() *FTPPassivePortRange {
	this := FTPPassivePortRange{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *FTPPassivePortRange) GetStart() int32 {
	if o == nil || o.Start == nil {
		var ret int32
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FTPPassivePortRange) GetStartOk() (*int32, bool) {
	if o == nil || o.Start == nil {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *FTPPassivePortRange) HasStart() bool {
	if o != nil && o.Start != nil {
		return true
	}

	return false
}

// SetStart gets a reference to the given int32 and assigns it to the Start field.
func (o *FTPPassivePortRange) SetStart(v int32) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *FTPPassivePortRange) GetEnd() int32 {
	if o == nil || o.End == nil {
		var ret int32
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FTPPassivePortRange) GetEndOk() (*int32, bool) {
	if o == nil || o.End == nil {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *FTPPassivePortRange) HasEnd() bool {
	if o != nil && o.End != nil {
		return true
	}

	return false
}

// SetEnd gets a reference to the given int32 and assigns it to the End field.
func (o *FTPPassivePortRange) SetEnd(v int32) {
	o.End = &v
}

func (o FTPPassivePortRange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Start != nil {
		toSerialize["start"] = o.Start
	}
	if o.End != nil {
		toSerialize["end"] = o.End
	}
	return json.Marshal(toSerialize)
}

type NullableFTPPassivePortRange struct {
	value *FTPPassivePortRange
	isSet bool
}

func (v NullableFTPPassivePortRange) Get() *FTPPassivePortRange {
	return v.value
}

func (v *NullableFTPPassivePortRange) Set(val *FTPPassivePortRange) {
	v.value = val
	v.isSet = true
}

func (v NullableFTPPassivePortRange) IsSet() bool {
	return v.isSet
}

func (v *NullableFTPPassivePortRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFTPPassivePortRange(val *FTPPassivePortRange) *NullableFTPPassivePortRange {
	return &NullableFTPPassivePortRange{value: val, isSet: true}
}

func (v NullableFTPPassivePortRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFTPPassivePortRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


