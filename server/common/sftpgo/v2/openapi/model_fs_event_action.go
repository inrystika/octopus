/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// FsEventAction the model 'FsEventAction'
type FsEventAction string

// List of FsEventAction
const (
	FSEVENTACTION_DOWNLOAD FsEventAction = "download"
	FSEVENTACTION_PRE_UPLOAD FsEventAction = "pre-upload"
	FSEVENTACTION_UPLOAD FsEventAction = "upload"
	FSEVENTACTION_DELETE FsEventAction = "delete"
	FSEVENTACTION_RENAME FsEventAction = "rename"
	FSEVENTACTION_MKDIR FsEventAction = "mkdir"
	FSEVENTACTION_RMDIR FsEventAction = "rmdir"
	FSEVENTACTION_SSH_CMD FsEventAction = "ssh_cmd"
)

// All allowed values of FsEventAction enum
var AllowedFsEventActionEnumValues = []FsEventAction{
	"download",
	"pre-upload",
	"upload",
	"delete",
	"rename",
	"mkdir",
	"rmdir",
	"ssh_cmd",
}

func (v *FsEventAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FsEventAction(value)
	for _, existing := range AllowedFsEventActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FsEventAction", value)
}

// NewFsEventActionFromValue returns a pointer to a valid FsEventAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFsEventActionFromValue(v string) (*FsEventAction, error) {
	ev := FsEventAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FsEventAction: valid values are %v", v, AllowedFsEventActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FsEventAction) IsValid() bool {
	for _, existing := range AllowedFsEventActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FsEventAction value
func (v FsEventAction) Ptr() *FsEventAction {
	return &v
}

type NullableFsEventAction struct {
	value *FsEventAction
	isSet bool
}

func (v NullableFsEventAction) Get() *FsEventAction {
	return v.value
}

func (v *NullableFsEventAction) Set(val *FsEventAction) {
	v.value = val
	v.isSet = true
}

func (v NullableFsEventAction) IsSet() bool {
	return v.isSet
}

func (v *NullableFsEventAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFsEventAction(val *FsEventAction) *NullableFsEventAction {
	return &NullableFsEventAction{value: val, isSet: true}
}

func (v NullableFsEventAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFsEventAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

