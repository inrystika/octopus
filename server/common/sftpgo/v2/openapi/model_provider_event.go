/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ProviderEvent struct for ProviderEvent
type ProviderEvent struct {
	Id *string `json:"id,omitempty"`
	// unix timestamp in nanoseconds
	Timestamp *int64 `json:"timestamp,omitempty"`
	Action *ProviderEventAction `json:"action,omitempty"`
	Username *string `json:"username,omitempty"`
	Ip *string `json:"ip,omitempty"`
	ObjectType *ProviderEventObjectType `json:"object_type,omitempty"`
	ObjectName *string `json:"object_name,omitempty"`
	InstanceId *string `json:"instance_id,omitempty"`
}

// NewProviderEvent instantiates a new ProviderEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderEvent() *ProviderEvent {
	this := ProviderEvent{}
	return &this
}

// NewProviderEventWithDefaults instantiates a new ProviderEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderEventWithDefaults() *ProviderEvent {
	this := ProviderEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProviderEvent) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderEvent) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProviderEvent) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProviderEvent) SetId(v string) {
	o.Id = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ProviderEvent) GetTimestamp() int64 {
	if o == nil || o.Timestamp == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderEvent) GetTimestampOk() (*int64, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ProviderEvent) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *ProviderEvent) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *ProviderEvent) GetAction() ProviderEventAction {
	if o == nil || o.Action == nil {
		var ret ProviderEventAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderEvent) GetActionOk() (*ProviderEventAction, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *ProviderEvent) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given ProviderEventAction and assigns it to the Action field.
func (o *ProviderEvent) SetAction(v ProviderEventAction) {
	o.Action = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ProviderEvent) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderEvent) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ProviderEvent) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ProviderEvent) SetUsername(v string) {
	o.Username = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *ProviderEvent) GetIp() string {
	if o == nil || o.Ip == nil {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderEvent) GetIpOk() (*string, bool) {
	if o == nil || o.Ip == nil {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *ProviderEvent) HasIp() bool {
	if o != nil && o.Ip != nil {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *ProviderEvent) SetIp(v string) {
	o.Ip = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *ProviderEvent) GetObjectType() ProviderEventObjectType {
	if o == nil || o.ObjectType == nil {
		var ret ProviderEventObjectType
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderEvent) GetObjectTypeOk() (*ProviderEventObjectType, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *ProviderEvent) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given ProviderEventObjectType and assigns it to the ObjectType field.
func (o *ProviderEvent) SetObjectType(v ProviderEventObjectType) {
	o.ObjectType = &v
}

// GetObjectName returns the ObjectName field value if set, zero value otherwise.
func (o *ProviderEvent) GetObjectName() string {
	if o == nil || o.ObjectName == nil {
		var ret string
		return ret
	}
	return *o.ObjectName
}

// GetObjectNameOk returns a tuple with the ObjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderEvent) GetObjectNameOk() (*string, bool) {
	if o == nil || o.ObjectName == nil {
		return nil, false
	}
	return o.ObjectName, true
}

// HasObjectName returns a boolean if a field has been set.
func (o *ProviderEvent) HasObjectName() bool {
	if o != nil && o.ObjectName != nil {
		return true
	}

	return false
}

// SetObjectName gets a reference to the given string and assigns it to the ObjectName field.
func (o *ProviderEvent) SetObjectName(v string) {
	o.ObjectName = &v
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *ProviderEvent) GetInstanceId() string {
	if o == nil || o.InstanceId == nil {
		var ret string
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderEvent) GetInstanceIdOk() (*string, bool) {
	if o == nil || o.InstanceId == nil {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *ProviderEvent) HasInstanceId() bool {
	if o != nil && o.InstanceId != nil {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given string and assigns it to the InstanceId field.
func (o *ProviderEvent) SetInstanceId(v string) {
	o.InstanceId = &v
}

func (o ProviderEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}
	if o.ObjectType != nil {
		toSerialize["object_type"] = o.ObjectType
	}
	if o.ObjectName != nil {
		toSerialize["object_name"] = o.ObjectName
	}
	if o.InstanceId != nil {
		toSerialize["instance_id"] = o.InstanceId
	}
	return json.Marshal(toSerialize)
}

type NullableProviderEvent struct {
	value *ProviderEvent
	isSet bool
}

func (v NullableProviderEvent) Get() *ProviderEvent {
	return v.value
}

func (v *NullableProviderEvent) Set(val *ProviderEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderEvent(val *ProviderEvent) *NullableProviderEvent {
	return &NullableProviderEvent{value: val, isSet: true}
}

func (v NullableProviderEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


