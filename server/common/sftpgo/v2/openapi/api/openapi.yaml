openapi: 3.0.3
info:
  contact:
    name: API support
    url: https://github.com/drakkan/sftpgo
  description: |
    SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well.
    Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one.
    SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one.
    Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user.
    SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date.
  license:
    name: AGPLv3
    url: https://www.gnu.org/licenses/agpl-3.0.en.html
  title: SFTPGo
  version: 2.2.2-dev
servers:
- url: /api/v2
security:
- BearerAuth: []
- APIKeyAuth: []
tags:
- name: healthcheck
- name: token
- name: maintenance
- name: admins
- name: API keys
- name: connections
- name: defender
- name: quota
- name: folders
- name: users
- name: data retention
- name: events
- name: metadata
- name: user APIs
- name: public shares
paths:
  /healthz:
    get:
      description: This endpoint can be used to check if the application is running
        and responding to requests
      operationId: healthz
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: ok
                type: string
          description: successful operation
      security: []
      servers:
      - url: /
      summary: health check
      tags:
      - healthcheck
  /shares/{id}:
    get:
      description: A zip file, containing the shared files and folders, will be generated
        on the fly and returned as response body. Only folders and regular files will
        be included in the zip. The share must be defined with the read scope and
        the associated user must have list and download permissions
      operationId: get_share
      parameters:
      - description: the share id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: compress
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: binary
                type: string
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BasicAuth: []
      summary: Download shared files and folders as a single zip file
      tags:
      - public shares
    post:
      description: The share must be defined with the write scope and the associated
        user must have the upload permission
      operationId: upload_to_share
      parameters:
      - description: the share id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          multipart/form-data:
            schema:
              properties:
                filenames:
                  items:
                    format: binary
                    type: string
                  minItems: 1
                  type: array
                  uniqueItems: true
              type: object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiResponse'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Request Entity Too Large, max allowed size exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BasicAuth: []
      summary: Upload one or more files to the shared path
      tags:
      - public shares
  /shares/{id}/files:
    get:
      description: Returns the file contents as response body. The share must have
        exactly one path defined and it must be a directory for this to work
      operationId: download_share_file
      parameters:
      - description: the share id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Path to the file to download. It must be URL encoded, for example
          the path "my dir/àdir/file.txt" must be sent as "my%20dir%2F%C3%A0dir%2Ffile.txt"
        explode: true
        in: query
        name: path
        required: true
        schema:
          type: string
        style: form
      - description: If set, the response will not have the Content-Disposition header
          set to `attachment`
        explode: true
        in: query
        name: inline
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: binary
                type: string
          description: successful operation
        "206":
          content:
            '*/*':
              schema:
                format: binary
                type: string
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BasicAuth: []
      summary: Download a single file
      tags:
      - public shares
  /shares/{id}/dirs:
    get:
      description: Returns the contents of the specified directory for the specified
        share. The share must have exactly one path defined and it must be a directory
        for this to work
      operationId: get_share_dir_contents
      parameters:
      - description: the share id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Path to the folder to read. It must be URL encoded, for example
          the path "my dir/àdir" must be sent as "my%20dir%2F%C3%A0dir". If empty
          or missing the root folder is assumed
        explode: true
        in: query
        name: path
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DirEntry'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BasicAuth: []
      summary: Read directory contents
      tags:
      - public shares
  /shares/{id}/{fileName}:
    post:
      description: The share must be defined with the write scope and the associated
        user must have the upload/overwrite permissions
      operationId: upload_single_to_share
      parameters:
      - description: the share id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: the name of the new file. It must be path encoded. Sub directories
          are not accepted
        explode: false
        in: path
        name: fileName
        required: true
        schema:
          type: string
        style: simple
      - description: File modification time as unix timestamp in milliseconds
        explode: false
        in: header
        name: X-SFTPGO-MTIME
        required: false
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/*:
            schema:
              format: binary
              type: string
          text/*:
            schema:
              format: binary
              type: string
          image/*:
            schema:
              format: binary
              type: string
          audio/*:
            schema:
              format: binary
              type: string
          video/*:
            schema:
              format: binary
              type: string
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiResponse'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Request Entity Too Large, max allowed size exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BasicAuth: []
      summary: Upload a single file to the shared path
      tags:
      - public shares
  /token:
    get:
      description: Returns an access token and its expiration
      operationId: get_token
      parameters:
      - description: If you have 2FA configured for the admin attempting to log in
          you need to set the authentication code using this header parameter
        explode: false
        in: header
        name: X-SFTPGO-OTP
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BasicAuth: []
      summary: Get a new admin access token
      tags:
      - token
  /logout:
    get:
      description: Allows to invalidate an admin token before its expiration
      operationId: logout
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Invalidate an admin access token
      tags:
      - token
  /user/token:
    get:
      description: Returns an access token and its expiration
      operationId: get_user_token
      parameters:
      - description: If you have 2FA configured, for the HTTP protocol, for the user
          attempting to log in you need to set the authentication code using this
          header parameter
        explode: false
        in: header
        name: X-SFTPGO-OTP
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BasicAuth: []
      summary: Get a new user access token
      tags:
      - token
  /user/logout:
    get:
      description: Allows to invalidate a client token before its expiration
      operationId: client_logout
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Invalidate a user access token
      tags:
      - token
  /version:
    get:
      description: Returns version details such as the version number, build date,
        commit hash and enabled features
      operationId: get_version
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get version details
      tags:
      - maintenance
  /changepwd/admin:
    put:
      deprecated: true
      description: Changes the password for the logged in admin. Please use '/admin/changepwd'
        instead
      operationId: change_admin_password_deprecated
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PwdChange'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Change admin password
      tags:
      - admins
  /admin/changepwd:
    put:
      description: Changes the password for the logged in admin
      operationId: change_admin_password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PwdChange'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Change admin password
      tags:
      - admins
  /admin/profile:
    get:
      description: Returns the profile for the logged in admin
      operationId: get_admin_profile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminProfile'
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Get admin profile
      tags:
      - admins
    put:
      description: Allows to update the profile for the logged in admin
      operationId: update_admin_profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminProfile'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Update admin profile
      tags:
      - admins
  /admin/2fa/recoverycodes:
    get:
      description: Returns the recovery codes for the logged in admin. Recovery codes
        can be used if the admin loses access to their second factor auth device.
        Recovery codes are returned unencrypted
      operationId: get_admin_recovery_codes
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RecoveryCode'
                type: array
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Get recovery codes
      tags:
      - admins
    post:
      description: Generates new recovery codes for the logged in admin. Generating
        new recovery codes you automatically invalidate old ones
      operationId: generate_admin_recovery_codes
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Generate recovery codes
      tags:
      - admins
  /admin/totp/configs:
    get:
      description: Returns the available TOTP configurations for the logged in admin
      operationId: get_admin_totp_configs
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TOTPConfig'
                type: array
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Get available TOTP configuration
      tags:
      - admins
  /admin/totp/generate:
    post:
      description: Generates a new TOTP secret, including the QR code as png, using
        the specified configuration for the logged in admin
      operationId: generate_admin_totp_secret
      requestBody:
        $ref: '#/components/requestBodies/inline_object_1'
        content:
          application/json:
            schema:
              properties:
                config_name:
                  description: name of the configuration to use to generate the secret
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Generate a new TOTP secret
      tags:
      - admins
  /admin/totp/validate:
    post:
      description: Checks if the given authentication code can be validated using
        the specified secret and config name
      operationId: validate_admin_totp_secret
      requestBody:
        $ref: '#/components/requestBodies/inline_object_2'
        content:
          application/json:
            schema:
              properties:
                config_name:
                  description: name of the configuration to use to validate the passcode
                  type: string
                passcode:
                  description: passcode to validate
                  type: string
                secret:
                  description: secret to use to validate the passcode
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                message: Passcode successfully validated
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Validate a one time authentication code
      tags:
      - admins
  /admin/totp/save:
    post:
      description: Saves the specified TOTP config for the logged in admin
      operationId: save_admin_totp_config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminTOTPConfig'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                message: TOTP configuration saved
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Save a TOTP config
      tags:
      - admins
  /connections:
    get:
      description: Returns the active users and info about their current uploads/downloads
      operationId: get_connections
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ConnectionStatus'
                type: array
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get connections details
      tags:
      - connections
  /connections/{connectionID}:
    delete:
      description: Terminates an active connection
      operationId: close_connection
      parameters:
      - description: ID of the connection to close
        explode: false
        in: path
        name: connectionID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                message: Connection closed
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Close connection
      tags:
      - connections
  /defender/hosts:
    get:
      description: Returns hosts that are banned or for which some violations have
        been detected
      operationId: get_defender_hosts
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DefenderEntry'
                type: array
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get hosts
      tags:
      - defender
  /defender/hosts/{id}:
    delete:
      description: Unbans the specified host or clears its violations
      operationId: delete_defender_host_by_id
      parameters:
      - description: host id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Removes a host from the defender lists
      tags:
      - defender
    get:
      description: Returns the host with the given id, if it exists
      operationId: get_defender_host_by_id
      parameters:
      - description: host id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefenderEntry'
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get host by id
      tags:
      - defender
  /defender/bantime:
    get:
      deprecated: true
      description: Deprecated, please use '/defender/hosts', '/defender/hosts/{id}'
        instead
      operationId: get_ban_time
      parameters:
      - description: IPv4/IPv6 address
        explode: true
        in: query
        name: ip
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BanStatus'
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get ban time
      tags:
      - defender
  /defender/unban:
    post:
      deprecated: true
      description: Deprecated, please use '/defender/hosts/{id}' instead
      operationId: unban_host
      requestBody:
        $ref: '#/components/requestBodies/inline_object_3'
        content:
          application/json:
            schema:
              properties:
                ip:
                  description: IPv4/IPv6 address to remove
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Unban
      tags:
      - defender
  /defender/score:
    get:
      deprecated: true
      description: Deprecated, please use '/defender/hosts', '/defender/hosts/{id}'
        instead
      operationId: get_score
      parameters:
      - description: IPv4/IPv6 address
        explode: true
        in: query
        name: ip
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreStatus'
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get score
      tags:
      - defender
  /metadata/users/checks:
    get:
      description: Returns the active metadata checks
      operationId: get_users_metadata_checks
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MetadataCheck'
                type: array
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get metadata checks
      tags:
      - metadata
  /metadata/users/{username}/check:
    post:
      description: Starts a new metadata check for the given user. A metadata check
        requires a metadata plugin and removes the metadata associated to missing
        items (for example objects deleted outside SFTPGo). If a metadata check for
        this user is already active a 409 status code is returned. Metadata are stored
        for cloud storage backends. This API does nothing for other backends or if
        no metadata plugin is configured
      operationId: start_user_metadata_check
      parameters:
      - description: the username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              example:
                message: Check started
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Start a metadata check
      tags:
      - metadata
  /retention/users/checks:
    get:
      description: Returns the active retention checks
      operationId: get_users_retention_checks
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RetentionCheck'
                type: array
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get retention checks
      tags:
      - data retention
  /retention/users/{username}/check:
    post:
      description: Starts a new retention check for the given user. If a retention
        check for this user is already active a 409 status code is returned
      operationId: start_user_retention_check
      parameters:
      - description: the username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - description: specify how to notify results
        explode: false
        in: query
        name: notifications
        required: false
        schema:
          items:
            $ref: '#/components/schemas/RetentionCheckNotification'
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/FolderRetention'
              type: array
        description: Defines virtual paths to check and their retention time in hours
        required: true
      responses:
        "202":
          content:
            application/json:
              example:
                message: Check started
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Start a retention check
      tags:
      - data retention
  /quotas/users/scans:
    get:
      description: Returns the active user quota scans
      operationId: get_users_quota_scans
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/QuotaScan'
                type: array
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get active user quota scans
      tags:
      - quota
  /quotas/users/{username}/scan:
    post:
      description: Starts a new quota scan for the given user. A quota scan updates
        the number of files and their total size for the specified user and the virtual
        folders, if any, included in his quota
      operationId: start_user_quota_scan
      parameters:
      - description: the username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              example:
                message: Scan started
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Start a user quota scan
      tags:
      - quota
  /quotas/users/{username}/usage:
    put:
      description: Sets the current used quota limits for the given user
      operationId: user_quota_update_usage
      parameters:
      - description: the username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - description: the update mode specifies if the given quota usage values should
          be added or replace the current ones
        explode: true
        in: query
        name: mode
        required: false
        schema:
          description: |
            Update type:
                * `add` - add the specified quota limits to the current used ones
                * `reset` - reset the values to the specified ones. This is the default
          enum:
          - add
          - reset
          example: reset
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuotaUsage'
        description: If used_quota_size and used_quota_files are missing they will
          default to 0, this means that if mode is "add" the current value, for the
          missing field, will remain unchanged, if mode is "reset" the missing field
          is set to 0
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                message: Quota updated
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Update disk quota usage limits
      tags:
      - quota
  /quotas/users/{username}/transfer-usage:
    put:
      description: Sets the current used transfer quota limits for the given user
      operationId: user_transfer_quota_update_usage
      parameters:
      - description: the username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - description: the update mode specifies if the given quota usage values should
          be added or replace the current ones
        explode: true
        in: query
        name: mode
        required: false
        schema:
          description: |
            Update type:
                * `add` - add the specified quota limits to the current used ones
                * `reset` - reset the values to the specified ones. This is the default
          enum:
          - add
          - reset
          example: reset
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferQuotaUsage'
        description: If used_upload_data_transfer and used_download_data_transfer
          are missing they will default to 0, this means that if mode is "add" the
          current value, for the missing field, will remain unchanged, if mode is
          "reset" the missing field is set to 0
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                message: Quota updated
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Update transfer quota usage limits
      tags:
      - quota
  /quotas/folders/scans:
    get:
      description: Returns the active folder quota scans
      operationId: get_folders_quota_scans
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FolderQuotaScan'
                type: array
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get active folder quota scans
      tags:
      - quota
  /quotas/folders/{name}/scan:
    post:
      description: Starts a new quota scan for the given folder. A quota scan update
        the number of files and their total size for the specified folder
      operationId: start_folder_quota_scan
      parameters:
      - description: folder name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              example:
                message: Scan started
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Start a folder quota scan
      tags:
      - quota
  /quotas/folders/{name}/usage:
    put:
      description: Sets the current used quota limits for the given folder
      operationId: folder_quota_update_usage
      parameters:
      - description: folder name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: the update mode specifies if the given quota usage values should
          be added or replace the current ones
        explode: true
        in: query
        name: mode
        required: false
        schema:
          description: |
            Update type:
              * `add` - add the specified quota limits to the current used ones
              * `reset` - reset the values to the specified ones. This is the default
          enum:
          - add
          - reset
          example: reset
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuotaUsage'
        description: If used_quota_size and used_quota_files are missing they will
          default to 0, this means that if mode is "add" the current value, for the
          missing field, will remain unchanged, if mode is "reset" the missing field
          is set to 0
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                message: Quota updated
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Update folder quota usage limits
      tags:
      - quota
  /quota-scans:
    get:
      deprecated: true
      description: Deprecated, please use '/quotas/users/scans' instead
      operationId: get_users_quota_scans_deprecated
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/QuotaScan'
                type: array
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get quota scans
      tags:
      - quota
    post:
      deprecated: true
      description: Deprecated, please use '/quotas/users/{username}/scan' instead
      operationId: start_user_quota_scan_deprecated
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "202":
          content:
            application/json:
              example:
                message: Scan started
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Start user quota scan
      tags:
      - quota
  /quota-update:
    put:
      deprecated: true
      description: Deprecated, please use '/quotas/users/{username}/usage' instead
      operationId: user_quota_update_usage_deprecated
      parameters:
      - description: the update mode specifies if the given quota usage values should
          be added or replace the current ones
        explode: true
        in: query
        name: mode
        required: false
        schema:
          description: |
            Update type:
              * `add` - add the specified quota limits to the current used ones
              * `reset` - reset the values to the specified ones. This is the default
          enum:
          - add
          - reset
          example: reset
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: The only user mandatory fields are username, used_quota_size
          and used_quota_files. Please note that if the quota fields are missing they
          will default to 0, this means that if mode is "add" the current value will
          remain unchanged, if mode is "reset" the missing field is set to 0
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                message: Quota updated
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Update quota usage limits
      tags:
      - quota
  /folder-quota-update:
    put:
      deprecated: true
      description: Deprecated, please use '/quotas/folders/{name}/usage' instead
      operationId: folder_quota_update_usage_deprecated
      parameters:
      - description: the update mode specifies if the given quota usage values should
          be added or replace the current ones
        explode: true
        in: query
        name: mode
        required: false
        schema:
          description: |
            Update type:
              * `add` - add the specified quota limits to the current used ones
              * `reset` - reset the values to the specified ones. This is the default
          enum:
          - add
          - reset
          example: reset
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseVirtualFolder'
        description: The only folder mandatory fields are mapped_path,used_quota_size
          and used_quota_files. Please note that if the used quota fields are missing
          they will default to 0, this means that if mode is "add" the current value
          will remain unchanged, if mode is "reset" the missing field is set to 0
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                message: Quota updated
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Update folder quota limits
      tags:
      - quota
  /folder-quota-scans:
    get:
      deprecated: true
      description: Deprecated, please use '/quotas/folders/scans' instead
      operationId: get_folders_quota_scans_deprecated
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FolderQuotaScan'
                type: array
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get folders quota scans
      tags:
      - quota
    post:
      deprecated: true
      description: Deprecated, please use '/quotas/folders/{name}/scan' instead
      operationId: start_folder_quota_scan_deprecated
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseVirtualFolder'
        required: true
      responses:
        "202":
          content:
            application/json:
              example:
                message: Scan started
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Start a folder quota scan
      tags:
      - quota
  /folders:
    get:
      description: Returns an array with one or more folders
      operationId: get_folders
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: The maximum number of items to return. Max value is 500, default
          is 100
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          maximum: 500
          minimum: 1
          type: integer
        style: form
      - description: Ordering folders by path. Default ASC
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          example: ASC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BaseVirtualFolder'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get folders
      tags:
      - folders
    post:
      description: Adds a new folder. A quota scan is required to update the used
        files/size
      operationId: add_folder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseVirtualFolder'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseVirtualFolder'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Add folder
      tags:
      - folders
  /folders/{name}:
    delete:
      description: Deletes an existing folder
      operationId: delete_folder
      parameters:
      - description: folder name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                message: User deleted
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Delete folder
      tags:
      - folders
    get:
      description: Returns the folder with the given name if it exists.
      operationId: get_folder_by_name
      parameters:
      - description: folder name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseVirtualFolder'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Find folders by name
      tags:
      - folders
    put:
      description: Updates an existing folder
      operationId: update_folder
      parameters:
      - description: folder name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseVirtualFolder'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                message: User updated
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Update folder
      tags:
      - folders
  /events/fs:
    get:
      description: Returns an array with one or more filesystem events applying the
        specified filters. This API is only available if you configure an "eventsearcher"
        plugin
      operationId: get_fs_events
      parameters:
      - description: the event timestamp, unix timestamp in nanoseconds, must be greater
          than or equal to the specified one. 0 or missing means omit this filter
        explode: true
        in: query
        name: start_timestamp
        required: false
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: form
      - description: the event timestamp, unix timestamp in nanoseconds, must be less
          than or equal to the specified one. 0 or missing means omit this filter
        explode: true
        in: query
        name: end_timestamp
        required: false
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: form
      - description: the event action must be included among those specified. Empty
          or missing means omit this filter. Actions must be specified comma separated
        explode: false
        in: query
        name: actions
        required: false
        schema:
          items:
            $ref: '#/components/schemas/FsEventAction'
          type: array
        style: form
      - description: the event username must be the same as the one specified. Empty
          or missing means omit this filter
        explode: true
        in: query
        name: username
        required: false
        schema:
          type: string
        style: form
      - description: the event IP must be the same as the one specified. Empty or
          missing means omit this filter
        explode: true
        in: query
        name: ip
        required: false
        schema:
          type: string
        style: form
      - description: the event SSH command must be the same as the one specified.
          Empty or missing means omit this filter
        explode: true
        in: query
        name: ssh_cmd
        required: false
        schema:
          type: string
        style: form
      - description: the event filesystem provider must be the same as the one specified.
          Empty or missing means omit this filter
        explode: true
        in: query
        name: fs_provider
        required: false
        schema:
          $ref: '#/components/schemas/FsProviders'
        style: form
      - description: the bucket must be the same as the one specified. Empty or missing
          means omit this filter
        explode: true
        in: query
        name: bucket
        required: false
        schema:
          type: string
        style: form
      - description: the endpoint must be the same as the one specified. Empty or
          missing means omit this filter
        explode: true
        in: query
        name: endpoint
        required: false
        schema:
          type: string
        style: form
      - description: the event protocol must be included among those specified. Empty
          or missing means omit this filter. Values must be specified comma separated
        explode: false
        in: query
        name: protocols
        required: false
        schema:
          items:
            $ref: '#/components/schemas/EventProtocols'
          type: array
        style: form
      - description: the event status must be included among those specified. Empty
          or missing means omit this filter. Values must be specified comma separated
        explode: false
        in: query
        name: statuses
        required: false
        schema:
          items:
            $ref: '#/components/schemas/FsEventStatus'
          type: array
        style: form
      - description: the event instance id must be included among those specified.
          Empty or missing means omit this filter. Values must be specified comma
          separated
        explode: false
        in: query
        name: instance_ids
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: the event id must not be included among those specified. This
          is useful for cursor based pagination. Empty or missing means omit this
          filter. Values must be specified comma separated
        explode: false
        in: query
        name: exclude_ids
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The maximum number of items to return. Max value is 500, default
          is 100
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Ordering events by timestamp. Default DESC
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          example: DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FsEvent'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get filesystem events
      tags:
      - events
  /events/provider:
    get:
      description: Returns an array with one or more provider events applying the
        specified filters. This API is only available if you configure an "eventsearcher"
        plugin
      operationId: get_provider_events
      parameters:
      - description: the event timestamp, unix timestamp in nanoseconds, must be greater
          than or equal to the specified one. 0 or missing means omit this filter
        explode: true
        in: query
        name: start_timestamp
        required: false
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: form
      - description: the event timestamp, unix timestamp in nanoseconds, must be less
          than or equal to the specified one. 0 or missing means omit this filter
        explode: true
        in: query
        name: end_timestamp
        required: false
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: form
      - description: the event action must be included among those specified. Empty
          or missing means omit this filter. Actions must be specified comma separated
        explode: false
        in: query
        name: actions
        required: false
        schema:
          items:
            $ref: '#/components/schemas/ProviderEventAction'
          type: array
        style: form
      - description: the event username must be the same as the one specified. Empty
          or missing means omit this filter
        explode: true
        in: query
        name: username
        required: false
        schema:
          type: string
        style: form
      - description: the event IP must be the same as the one specified. Empty or
          missing means omit this filter
        explode: true
        in: query
        name: ip
        required: false
        schema:
          type: string
        style: form
      - description: the event object name must be the same as the one specified.
          Empty or missing means omit this filter
        explode: true
        in: query
        name: object_name
        required: false
        schema:
          type: string
        style: form
      - description: the event object type must be included among those specified.
          Empty or missing means omit this filter. Values must be specified comma
          separated
        explode: false
        in: query
        name: object_types
        required: false
        schema:
          items:
            $ref: '#/components/schemas/ProviderEventObjectType'
          type: array
        style: form
      - description: the event instance id must be included among those specified.
          Empty or missing means omit this filter. Values must be specified comma
          separated
        explode: false
        in: query
        name: instance_ids
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: the event id must not be included among those specified. This
          is useful for cursor based pagination. Empty or missing means omit this
          filter. Values must be specified comma separated
        explode: false
        in: query
        name: exclude_ids
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The maximum number of items to return. Max value is 500, default
          is 100
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Ordering events by timestamp. Default DESC
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          example: DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProviderEvent'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get provider events
      tags:
      - events
  /apikeys:
    get:
      description: Returns an array with one or more API keys. For security reasons
        hashed keys are omitted in the response
      operationId: get_api_keys
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: The maximum number of items to return. Max value is 500, default
          is 100
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          maximum: 500
          minimum: 1
          type: integer
        style: form
      - description: Ordering API keys by id. Default ASC
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          example: ASC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuthAPIKey'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Get API keys
      tags:
      - API keys
    post:
      description: Adds a new API key
      operationId: add_api_key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthAPIKey'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
          description: successful operation
          headers:
            X-Object-ID:
              description: ID for the new created API key
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: URL to retrieve the details for the new created API key
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Add API key
      tags:
      - API keys
  /apikeys/{id}:
    delete:
      description: Deletes an existing API key
      operationId: delete_api_key
      parameters:
      - description: the key id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                message: Admin deleted
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Delete API key
      tags:
      - API keys
    get:
      description: Returns the API key with the given id, if it exists. For security
        reasons the hashed key is omitted in the response
      operationId: get_api_key_by_id
      parameters:
      - description: the key id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthAPIKey'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Find API key by id
      tags:
      - API keys
    put:
      description: Updates an existing API key. You cannot update the key itself,
        the creation date and the last use
      operationId: update_api_key
      parameters:
      - description: the key id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthAPIKey'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                message: API key updated
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Update API key
      tags:
      - API keys
  /admins:
    get:
      description: Returns an array with one or more admins. For security reasons
        hashed passwords are omitted in the response
      operationId: get_admins
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: The maximum number of items to return. Max value is 500, default
          is 100
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          maximum: 500
          minimum: 1
          type: integer
        style: form
      - description: Ordering admins by username. Default ASC
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          example: ASC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Admin'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get admins
      tags:
      - admins
    post:
      description: 'Adds a new admin. Recovery codes and TOTP configuration cannot
        be set using this API: each admin must use the specific APIs'
      operationId: add_admin
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                value:
                  id: 1
                  status: 0
                  username: string
                  description: string
                  password: pa$$word
                  email: user@example.com
                  permissions:
                  - '*'
                  filters:
                    allow_list:
                    - 192.0.2.0/24
                    - 2001:db8::/32
                  additional_info: string
            schema:
              $ref: '#/components/schemas/Admin'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Add admin
      tags:
      - admins
  /admins/{username}:
    delete:
      description: Deletes an existing admin
      operationId: delete_admin
      parameters:
      - description: the admin username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                message: Admin deleted
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Delete admin
      tags:
      - admins
    get:
      description: Returns the admin with the given username, if it exists. For security
        reasons the hashed password is omitted in the response
      operationId: get_admin_by_username
      parameters:
      - description: the admin username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Find admins by username
      tags:
      - admins
    put:
      description: 'Updates an existing admin. Recovery codes and TOTP configuration
        cannot be set/updated using this API: each admin must use the specific APIs.
        You are not allowed to update the admin impersonated using an API key'
      operationId: update_admin
      parameters:
      - description: the admin username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                message: Admin updated
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Update admin
      tags:
      - admins
  /admins/{username}/2fa/disable:
    put:
      description: Disables second factor authentication for the given admin. This
        API must be used if the admin loses access to their second factor auth device
        and has no recovery codes
      operationId: disable_admin_2fa
      parameters:
      - description: the admin username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                message: 2FA disabled
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Disable second factor authentication
      tags:
      - admins
  /admins/{username}/forgot-password:
    post:
      description: You must set up an SMTP server and the account must have a valid
        email address, in which case SFTPGo will send a code via email to reset the
        password. If the specified admin does not exist, the request will be silently
        ignored (a success response will be returned) to avoid disclosing existing
        admins
      operationId: admin_forgot_password
      parameters:
      - description: the admin username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security: []
      summary: Send a password reset code by email
      tags:
      - admins
  /admins/{username}/reset-password:
    post:
      description: Set a new password using the code received via email
      operationId: admin_reset_password
      parameters:
      - description: the admin username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_4'
        content:
          application/json:
            schema:
              properties:
                code:
                  type: string
                password:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security: []
      summary: Reset the password
      tags:
      - admins
  /users:
    get:
      description: Returns an array with one or more users. For security reasons hashed
        passwords are omitted in the response
      operationId: get_users
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: The maximum number of items to return. Max value is 500, default
          is 100
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          maximum: 500
          minimum: 1
          type: integer
        style: form
      - description: Ordering users by username. Default ASC
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          example: ASC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get users
      tags:
      - users
    post:
      description: 'Adds a new user.Recovery codes and TOTP configuration cannot be
        set using this API: each user must use the specific APIs'
      operationId: add_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Add user
      tags:
      - users
  /users/{username}:
    delete:
      description: Deletes an existing user
      operationId: delete_user
      parameters:
      - description: the username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                message: User deleted
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Delete user
      tags:
      - users
    get:
      description: Returns the user with the given username if it exists. For security
        reasons the hashed password is omitted in the response
      operationId: get_user_by_username
      parameters:
      - description: the username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Find users by username
      tags:
      - users
    put:
      description: 'Updates an existing user and optionally disconnects it, if connected,
        to apply the new settings. Recovery codes and TOTP configuration cannot be
        set/updated using this API: each user must use the specific APIs'
      operationId: update_user
      parameters:
      - description: the username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Disconnect:
            * `0` The user will not be disconnected and it will continue to use the old configuration until connected. This is the default
            * `1` The user will be disconnected after a successful update. It must login again and so it will be forced to use the new configuration
        explode: true
        in: query
        name: disconnect
        required: false
        schema:
          enum:
          - 0
          - 1
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                message: User updated
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Update user
      tags:
      - users
  /users/{username}/2fa/disable:
    put:
      description: Disables second factor authentication for the given user. This
        API must be used if the user loses access to their second factor auth device
        and has no recovery codes
      operationId: disable_user_2fa
      parameters:
      - description: the username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                message: 2FA disabled
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Disable second factor authentication
      tags:
      - users
  /users/{username}/forgot-password:
    post:
      description: You must configure an SMTP server, the account must have a valid
        email address and must not have the "reset-password-disabled" restriction,
        in which case SFTPGo will send a code via email to reset the password. If
        the specified user does not exist, the request will be silently ignored (a
        success response will be returned) to avoid disclosing existing users
      operationId: user_forgot_password
      parameters:
      - description: the username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security: []
      summary: Send a password reset code by email
      tags:
      - users
  /users/{username}/reset-password:
    post:
      description: Set a new password using the code received via email
      operationId: user_reset_password
      parameters:
      - description: the username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_5'
        content:
          application/json:
            schema:
              properties:
                code:
                  type: string
                password:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security: []
      summary: Reset the password
      tags:
      - users
  /status:
    get:
      description: Retrieves the status of the active services
      operationId: get_status
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesStatus'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get status
      tags:
      - maintenance
  /dumpdata:
    get:
      description: Backups data as data provider independent JSON. The backup can
        be saved in a local file on the server, to avoid exposing sensitive data over
        the network, or returned as response body. The output of dumpdata can be used
        as input for loaddata
      operationId: dumpdata
      parameters:
      - description: Path for the file to write the JSON serialized data to. This
          path is relative to the configured "backups_path". If this file already
          exists it will be overwritten. To return the backup as response body set
          `output_data` to true instead.
        explode: true
        in: query
        name: output-file
        required: false
        schema:
          type: string
        style: form
      - description: |
          output data:
            * `0` or any other value != 1, the backup will be saved to a file on the server, `output_file` is required
            * `1` the backup will be returned as response body
        explode: true
        in: query
        name: output-data
        required: false
        schema:
          enum:
          - 0
          - 1
          type: integer
        style: form
      - description: |
          indent:
            * `0` no indentation. This is the default
            * `1` format the output JSON
        explode: true
        in: query
        name: indent
        required: false
        schema:
          enum:
          - 0
          - 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupData'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Dump data
      tags:
      - maintenance
  /loaddata:
    get:
      description: Restores SFTPGo data from a JSON backup file on the server. Objects
        will be restored one by one and the restore is stopped if a object cannot
        be added or updated, so it could happen a partial restore
      operationId: loaddata_from_file
      parameters:
      - description: |
          Quota scan:
            * `0` no quota scan is done, the imported users/folders will have used_quota_size and used_quota_files = 0 or the existing values if they already exists. This is the default
            * `1` scan quota
            * `2` scan quota if the user has quota restrictions
          required: false
        explode: true
        in: query
        name: scan-quota
        required: false
        schema:
          enum:
          - 0
          - 1
          - 2
          type: integer
        style: form
      - description: |
          Mode:
            * `0` New objects are added, existing ones are updated. This is the default
            * `1` New objects are added, existing ones are not modified
            * `2` New objects are added, existing ones are updated and connected users are disconnected and so forced to use the new configuration
        explode: true
        in: query
        name: mode
        required: false
        schema:
          enum:
          - 0
          - 1
          - 2
          type: integer
        style: form
      - description: Path for the file to read the JSON serialized data from. This
          can be an absolute path or a path relative to the configured "backups_path".
          The max allowed file size is 10MB
        explode: true
        in: query
        name: input-file
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                message: Data restored
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Load data from path
      tags:
      - maintenance
    post:
      description: Restores SFTPGo data from a JSON backup. Objects will be restored
        one by one and the restore is stopped if a object cannot be added or updated,
        so it could happen a partial restore
      operationId: loaddata_from_request_body
      parameters:
      - description: |
          Quota scan:
            * `0` no quota scan is done, the imported users/folders will have used_quota_size and used_quota_files = 0 or the existing values if they already exists. This is the default
            * `1` scan quota
            * `2` scan quota if the user has quota restrictions
          required: false
        explode: true
        in: query
        name: scan-quota
        required: false
        schema:
          enum:
          - 0
          - 1
          - 2
          type: integer
        style: form
      - description: |
          Mode:
            * `0` New objects are added, existing ones are updated. This is the default
            * `1` New objects are added, existing ones are not modified
            * `2` New objects are added, existing ones are updated and connected users are disconnected and so forced to use the new configuration
        explode: true
        in: query
        name: mode
        required: false
        schema:
          enum:
          - 0
          - 1
          - 2
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackupData'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                message: Data restored
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Load data
      tags:
      - maintenance
  /user/changepwd:
    put:
      description: Changes the password for the logged in user
      operationId: change_user_password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PwdChange'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - user APIs
  /user/publickeys:
    get:
      deprecated: true
      description: Returns the public keys for the logged in user. Deprecated please
        use "/user/profile" instead
      operationId: get_user_public_keys
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Get the user's public keys
      tags:
      - user APIs
    put:
      deprecated: true
      description: Sets the public keys for the logged in user. Public keys must be
        in OpenSSH format. Deprecated please use "/user/profile" instead
      operationId: set_user_public_keys
      requestBody:
        content:
          application/json:
            schema:
              items:
                description: Public key in OpenSSH format
                example: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPVILdH2u3yV5SAeE6XksD1z1vXRg0E4hJUov8ITDAZ2
                  user@host
                type: string
              type: array
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Set the user's public keys
      tags:
      - user APIs
  /user/profile:
    get:
      description: Returns the profile for the logged in user
      operationId: get_user_profile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - user APIs
    put:
      description: Allows to update the profile for the logged in user
      operationId: update_user_profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - user APIs
  /user/2fa/recoverycodes:
    get:
      description: Returns the recovery codes for the logged in user. Recovery codes
        can be used if the user loses access to their second factor auth device. Recovery
        codes are returned unencrypted
      operationId: get_user_recovery_codes
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RecoveryCode'
                type: array
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Get recovery codes
      tags:
      - user APIs
    post:
      description: Generates new recovery codes for the logged in user. Generating
        new recovery codes you automatically invalidate old ones
      operationId: generate_user_recovery_codes
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Generate recovery codes
      tags:
      - user APIs
  /user/totp/configs:
    get:
      description: Returns the available TOTP configurations for the logged in user
      operationId: get_user_totp_configs
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TOTPConfig'
                type: array
          description: successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Get available TOTP configuration
      tags:
      - user APIs
  /user/totp/generate:
    post:
      description: Generates a new TOTP secret, including the QR code as png, using
        the specified configuration for the logged in user
      operationId: generate_user_totp_secret
      requestBody:
        $ref: '#/components/requestBodies/inline_object_6'
        content:
          application/json:
            schema:
              properties:
                config_name:
                  description: name of the configuration to use to generate the secret
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Generate a new TOTP secret
      tags:
      - user APIs
  /user/totp/validate:
    post:
      description: Checks if the given authentication code can be validated using
        the specified secret and config name
      operationId: validate_user_totp_secret
      requestBody:
        $ref: '#/components/requestBodies/inline_object_7'
        content:
          application/json:
            schema:
              properties:
                config_name:
                  description: name of the configuration to use to validate the passcode
                  type: string
                passcode:
                  description: passcode to validate
                  type: string
                secret:
                  description: secret to use to validate the passcode
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                message: Passcode successfully validated
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Validate a one time authentication code
      tags:
      - user APIs
  /user/totp/save:
    post:
      description: Saves the specified TOTP config for the logged in user
      operationId: save_user_totp_config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTOTPConfig'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                message: TOTP configuration saved
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      security:
      - BearerAuth: []
      summary: Save a TOTP config
      tags:
      - user APIs
  /user/shares:
    get:
      description: Returns the share for the logged in user
      operationId: get_user_shares
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: The maximum number of items to return. Max value is 500, default
          is 100
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          maximum: 500
          minimum: 1
          type: integer
        style: form
      - description: Ordering shares by ID. Default ASC
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          example: ASC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Share'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: List user shares
      tags:
      - user APIs
    post:
      description: Adds a new share. The share id will be auto-generated
      operationId: add_share
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Share'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
          headers:
            X-Object-ID:
              description: ID for the new created share
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: URL to retrieve the details for the new created share
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Add a share
      tags:
      - user APIs
  /user/shares/{id}:
    delete:
      description: Deletes an existing share belonging to the logged in user
      operationId: delete_user_share
      parameters:
      - description: the share id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                message: Share deleted
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Delete share
      tags:
      - user APIs
    get:
      description: Returns a share by id for the logged in user
      operationId: get_user_share_by_id
      parameters:
      - description: the share id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Share'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Get share by id
      tags:
      - user APIs
    put:
      description: Updates an existing share belonging to the logged in user
      operationId: update_user_share
      parameters:
      - description: the share id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Share'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                message: Share updated
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Update share
      tags:
      - user APIs
  /user/folder:
    get:
      deprecated: true
      description: Returns the contents of the specified folder for the logged in
        user. Please use '/user/dirs' instead
      operationId: get_user_folder_contents
      parameters:
      - description: Path to the folder to read. It must be URL encoded, for example
          the path "my dir/àdir" must be sent as "my%20dir%2F%C3%A0dir". If empty
          or missing the root folder is assumed
        explode: true
        in: query
        name: path
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DirEntry'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Read folders contents
      tags:
      - user APIs
  /user/dirs:
    delete:
      description: Delete a directory for the logged in user. Only empty directories
        can be deleted
      operationId: delete_user_dir
      parameters:
      - description: Path to the folder to delete. It must be URL encoded, for example
          the path "my dir/àdir" must be sent as "my%20dir%2F%C3%A0dir"
        explode: true
        in: query
        name: path
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiResponse'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Delete a directory
      tags:
      - user APIs
    get:
      description: Returns the contents of the specified directory for the logged
        in user
      operationId: get_user_dir_contents
      parameters:
      - description: Path to the folder to read. It must be URL encoded, for example
          the path "my dir/àdir" must be sent as "my%20dir%2F%C3%A0dir". If empty
          or missing the root folder is assumed
        explode: true
        in: query
        name: path
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DirEntry'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Read directory contents
      tags:
      - user APIs
    patch:
      description: Rename a directory for the logged in user. The rename is allowed
        for empty directory or for non empty local directories, with no virtual folders
        inside
      operationId: rename_user_dir
      parameters:
      - description: Path to the folder to rename. It must be URL encoded, for example
          the path "my dir/àdir" must be sent as "my%20dir%2F%C3%A0dir"
        explode: true
        in: query
        name: path
        required: true
        schema:
          type: string
        style: form
      - description: New name. It must be URL encoded, for example the path "my dir/àdir"
          must be sent as "my%20dir%2F%C3%A0dir"
        explode: true
        in: query
        name: target
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiResponse'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Rename a directory
      tags:
      - user APIs
    post:
      description: Create a directory for the logged in user
      operationId: create_user_dir
      parameters:
      - description: Path to the folder to create. It must be URL encoded, for example
          the path "my dir/àdir" must be sent as "my%20dir%2F%C3%A0dir"
        explode: true
        in: query
        name: path
        required: true
        schema:
          type: string
        style: form
      - description: Create parent directories if they do not exist?
        explode: true
        in: query
        name: mkdir_parents
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiResponse'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Create a directory
      tags:
      - user APIs
  /user/file:
    get:
      deprecated: true
      description: Returns the file contents as response body. Please use '/user/files'
        instead
      operationId: get_user_file
      parameters:
      - description: Path to the file to download. It must be URL encoded, for example
          the path "my dir/àdir/file.txt" must be sent as "my%20dir%2F%C3%A0dir%2Ffile.txt"
        explode: true
        in: query
        name: path
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: binary
                type: string
          description: successful operation
        "206":
          content:
            '*/*':
              schema:
                format: binary
                type: string
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Download a single file
      tags:
      - user APIs
  /user/files:
    delete:
      description: Delete a file for the logged in user.
      operationId: delete_user_file
      parameters:
      - description: Path to the file to delete. It must be URL encoded
        explode: true
        in: query
        name: path
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiResponse'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Delete a file
      tags:
      - user APIs
    get:
      description: Returns the file contents as response body
      operationId: download_user_file
      parameters:
      - description: Path to the file to download. It must be URL encoded, for example
          the path "my dir/àdir/file.txt" must be sent as "my%20dir%2F%C3%A0dir%2Ffile.txt"
        explode: true
        in: query
        name: path
        required: true
        schema:
          type: string
        style: form
      - description: If set, the response will not have the Content-Disposition header
          set to `attachment`
        explode: true
        in: query
        name: inline
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: binary
                type: string
          description: successful operation
        "206":
          content:
            '*/*':
              schema:
                format: binary
                type: string
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Download a single file
      tags:
      - user APIs
    patch:
      description: Rename a file for the logged in user
      operationId: rename_user_file
      parameters:
      - description: Path to the file to rename. It must be URL encoded
        explode: true
        in: query
        name: path
        required: true
        schema:
          type: string
        style: form
      - description: New name. It must be URL encoded
        explode: true
        in: query
        name: target
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiResponse'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Rename a file
      tags:
      - user APIs
    post:
      description: Upload one or more files for the logged in user
      operationId: create_user_files
      parameters:
      - description: Parent directory for the uploaded files. It must be URL encoded,
          for example the path "my dir/àdir" must be sent as "my%20dir%2F%C3%A0dir".
          If empty or missing the root path is assumed. If a file with the same name
          already exists, it will be overwritten
        explode: true
        in: query
        name: path
        required: false
        schema:
          type: string
        style: form
      - description: Create parent directories if they do not exist?
        explode: true
        in: query
        name: mkdir_parents
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/inline_object_8'
        content:
          multipart/form-data:
            schema:
              properties:
                filenames:
                  items:
                    format: binary
                    type: string
                  minItems: 1
                  type: array
                  uniqueItems: true
              type: object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiResponse'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Request Entity Too Large, max allowed size exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Upload files
      tags:
      - user APIs
  /user/files/upload:
    post:
      description: Upload a single file for the logged in user to an existing directory.
        This API does not use multipart/form-data and so no temporary files are created
        server side but only a single file can be uploaded as POST body
      operationId: create_user_file
      parameters:
      - description: Full file path. It must be path encoded, for example the path
          "my dir/àdir/file.txt" must be sent as "my%20dir%2F%C3%A0dir%2Ffile.txt".
          The parent directory must exist. If a file with the same name already exists,
          it will be overwritten
        explode: true
        in: query
        name: path
        required: true
        schema:
          type: string
        style: form
      - description: Create parent directories if they do not exist?
        explode: true
        in: query
        name: mkdir_parents
        required: false
        schema:
          type: boolean
        style: form
      - description: File modification time as unix timestamp in milliseconds
        explode: false
        in: header
        name: X-SFTPGO-MTIME
        required: false
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/*:
            schema:
              format: binary
              type: string
          text/*:
            schema:
              format: binary
              type: string
          image/*:
            schema:
              format: binary
              type: string
          audio/*:
            schema:
              format: binary
              type: string
          video/*:
            schema:
              format: binary
              type: string
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiResponse'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Request Entity Too Large, max allowed size exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Upload a single file
      tags:
      - user APIs
  /user/files/metadata:
    patch:
      description: Set supported metadata attributes for the specified file or directory
      operationId: setprops_user_file
      parameters:
      - description: Full file/directory path. It must be URL encoded, for example
          the path "my dir/àdir/file.txt" must be sent as "my%20dir%2F%C3%A0dir%2Ffile.txt"
        explode: true
        in: query
        name: path
        required: true
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/inline_object_9'
        content:
          application/json:
            schema:
              properties:
                modification_time:
                  description: File modification time as unix timestamp in milliseconds
                  type: integer
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiResponse'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Request Entity Too Large, max allowed size exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Set metadata for a file/directory
      tags:
      - user APIs
  /user/streamzip:
    post:
      description: A zip file, containing the specified files and folders, will be
        generated on the fly and returned as response body. Only folders and regular
        files will be included in the zip
      operationId: streamzip
      requestBody:
        content:
          application/json:
            schema:
              items:
                description: Absolute file or folder path
                type: string
              type: array
        required: true
      responses:
        "200":
          content:
            application/zip:
              schema:
                format: binary
                type: string
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Internal Server Error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Unexpected Error
      summary: Download multiple files and folders as a single zip file
      tags:
      - user APIs
components:
  requestBodies:
    inline_object_1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_1'
      required: true
    inline_object_9:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_9'
      required: true
    inline_object:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/inline_object'
      required: true
    inline_object_8:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/inline_object_8'
      required: true
    inline_object_7:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_7'
      required: true
    inline_object_6:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_6'
      required: true
    inline_object_5:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_5'
      required: true
    inline_object_4:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_4'
      required: true
    inline_object_3:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_3'
      required: true
    inline_object_2:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_2'
      required: true
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
      description: Bad Request
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
      description: Unauthorized
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
      description: Forbidden
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
      description: Not Found
    Conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
      description: Conflict
    RequestEntityTooLarge:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
      description: Request Entity Too Large, max allowed size exceeded
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
      description: Internal Server Error
    DefaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
      description: Unexpected Error
  schemas:
    Permission:
      description: |
        Permissions:
          * `*` - all permissions are granted
          * `list` - list items is allowed
          * `download` - download files is allowed
          * `upload` - upload files is allowed
          * `overwrite` - overwrite an existing file, while uploading, is allowed. upload permission is required to allow file overwrite
          * `delete` - delete files or directories is allowed
          * `delete_files` - delete files is allowed
          * `delete_dirs` - delete directories is allowed
          * `rename` - rename files or directories is allowed
          * `rename_files` - rename files is allowed
          * `rename_dirs` - rename directories is allowed
          * `create_dirs` - create directories is allowed
          * `create_symlinks` - create links is allowed
          * `chmod` changing file or directory permissions is allowed
          * `chown` changing file or directory owner and group is allowed
          * `chtimes` changing file or directory access and modification time is allowed
      enum:
      - '*'
      - list
      - download
      - upload
      - overwrite
      - delete
      - delete_files
      - delete_dirs
      - rename
      - rename_files
      - rename_dirs
      - create_dirs
      - create_symlinks
      - chmod
      - chown
      - chtimes
      type: string
    DirPermissions:
      additionalProperties:
        items:
          $ref: '#/components/schemas/Permission'
        minItems: 1
        type: array
      description: hash map with directory as key and an array of permissions as value.
        Directories must be absolute paths, permissions for root directory ("/") are
        required
      minProperties: 1
      type: object
    AdminPermissions:
      description: |
        Admin permissions:
          * `*` - all permissions are granted
          * `add_users` - add new users is allowed
          * `edit_users` - change existing users is allowed
          * `del_users` - remove users is allowed
          * `view_users` - list users is allowed
          * `view_conns` - list active connections is allowed
          * `close_conns` - close active connections is allowed
          * `view_status` - view the server status is allowed
          * `manage_admins` - manage other admins is allowed
          * `manage_apikeys` - manage API keys is allowed
          * `quota_scans` - view and start quota scans is allowed
          * `manage_system` - backups and restores are allowed
          * `manage_defender` - remove ip from the dynamic blocklist is allowed
          * `view_defender` - list the dynamic blocklist is allowed
          * `retention_checks` - view and start retention checks is allowed
          * `metadata_checks` - view and start metadata checks is allowed
          * `view_events` - view and search filesystem and provider events is allowed
      enum:
      - '*'
      - add_users
      - edit_users
      - del_users
      - view_users
      - view_conns
      - close_conns
      - view_status
      - manage_admins
      - manage_apikeys
      - quota_scans
      - manage_system
      - manage_defender
      - view_defender
      - retention_checks
      - metadata_checks
      - view_events
      type: string
    FsProviders:
      description: |
        Filesystem providers:
          * `0` - Local filesystem
          * `1` - S3 Compatible Object Storage
          * `2` - Google Cloud Storage
          * `3` - Azure Blob Storage
          * `4` - Local filesystem encrypted
          * `5` - SFTP
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      type: integer
    LoginMethods:
      description: |
        Available login methods. To enable multi-step authentication you have to allow only multi-step login methods
          * `publickey`
          * `password`
          * `keyboard-interactive`
          * `publickey+password` - multi-step auth: public key and password
          * `publickey+keyboard-interactive` - multi-step auth: public key and keyboard interactive
          * `TLSCertificate`
          * `TLSCertificate+password` - multi-step auth: TLS client certificate and password
      enum:
      - publickey
      - password
      - keyboard-interactive
      - publickey+password
      - publickey+keyboard-interactive
      - TLSCertificate
      - TLSCertificate+password
      type: string
    SupportedProtocols:
      description: |
        Protocols:
          * `SSH` - includes both SFTP and SSH commands
          * `FTP` - plain FTP and FTPES/FTPS
          * `DAV` - WebDAV over HTTP/HTTPS
          * `HTTP` - WebClient/REST API
      enum:
      - SSH
      - FTP
      - DAV
      - HTTP
      type: string
    MFAProtocols:
      description: |
        Protocols:
          * `SSH` - includes both SFTP and SSH commands
          * `FTP` - plain FTP and FTPES/FTPS
          * `HTTP` - WebClient/REST API
      enum:
      - SSH
      - FTP
      - HTTP
      type: string
    EventProtocols:
      description: |
        Protocols:
          * `SSH` - SSH commands
          * `SFTP` - SFTP protocol
          * `FTP` - plain FTP and FTPES/FTPS
          * `DAV` - WebDAV
          * `HTTP` - WebClient/REST API
          * `DataRetention` - the event is generated by a data retention check
      enum:
      - SSH
      - SFTP
      - SCP
      - FTP
      - DAV
      - HTTP
      - DataRetention
      type: string
    WebClientOptions:
      description: |
        Options:
          * `publickey-change-disabled` - changing SSH public keys is not allowed
          * `write-disabled` - upload, rename, delete are not allowed even if the user has permissions for these actions
          * `mfa-disabled` - enabling multi-factor authentication is not allowed. This option cannot be set if the user has MFA already enabled
          * `password-change-disabled` - changing password is not allowed
          * `api-key-auth-change-disabled` - enabling/disabling API key authentication is not allowed
          * `info-change-disabled` - changing info such as email and description is not allowed
          * `shares-disabled` - sharing files and directories with external users is disabled
          * `password-reset-disabled` - resetting the password is disabled
      enum:
      - publickey-change-disabled
      - write-disabled
      - mfa-disabled
      - password-change-disabled
      - api-key-auth-change-disabled
      - info-change-disabled
      - shares-disabled
      - password-reset-disabled
      type: string
    RetentionCheckNotification:
      description: |
        Options:
          * `Hook` - notify result using the defined hook. A "data_retention_hook" must be defined in your configuration file for this to work
          * `Email` - notify results by email. The admin starting the retention check must have an associated email address and the SMTP server must be configured for this to work
      enum:
      - Hook
      - Email
      type: string
    AuthAPIKeyScope:
      description: |
        Options:
          * `1` - admin scope. The API key will be used to impersonate an SFTPGo admin
          * `2` - user scope. The API key will be used to impersonate an SFTPGo user
      enum:
      - 1
      - 2
      type: integer
    ShareScope:
      description: |
        Options:
          * `1` - read scope
          * `2` - write scope
      enum:
      - 1
      - 2
      type: integer
    TOTPHMacAlgo:
      description: Supported HMAC algorithms for Time-based one time passwords
      enum:
      - sha1
      - sha256
      - sha512
      type: string
    UserType:
      description: This is an hint for authentication plugins. It is ignored when
        using SFTPGo internal authentication
      enum:
      - ""
      - LDAPUser
      - OSUser
      type: string
    FsEventStatus:
      description: |
        Event status:
          * `1` - no error
          * `2` - generic error
          * `3` - quota exceeded error
      enum:
      - 1
      - 2
      - 3
      type: integer
    FsEventAction:
      enum:
      - download
      - pre-upload
      - upload
      - delete
      - rename
      - mkdir
      - rmdir
      - ssh_cmd
      type: string
    ProviderEventAction:
      enum:
      - add
      - update
      - delete
      type: string
    ProviderEventObjectType:
      enum:
      - user
      - admin
      - api_key
      - share
      type: string
    TOTPConfig:
      example:
        name: name
        issuer: issuer
      properties:
        name:
          type: string
        issuer:
          type: string
        algo:
          $ref: '#/components/schemas/TOTPHMacAlgo'
      type: object
    RecoveryCode:
      description: Recovery codes to use if the user loses access to their second
        factor auth device. Each code can only be used once, you should use these
        codes to login and disable or reset 2FA for your account
      example:
        secret:
          mode: 0
          additional_data: additional_data
          payload: payload
          key: key
          status: Plain
        used: true
      properties:
        secret:
          $ref: '#/components/schemas/Secret'
        used:
          type: boolean
      type: object
    BaseTOTPConfig:
      properties:
        enabled:
          type: boolean
        config_name:
          description: This name must be defined within the "totp" section of the
            SFTPGo configuration file. You will be unable to save a user/admin referencing
            a missing config_name
          type: string
        secret:
          $ref: '#/components/schemas/Secret'
      type: object
    AdminTOTPConfig:
      allOf:
      - $ref: '#/components/schemas/BaseTOTPConfig'
    UserTOTPConfig:
      allOf:
      - $ref: '#/components/schemas/BaseTOTPConfig'
      - $ref: '#/components/schemas/UserTOTPConfig_allOf'
    PatternsFilter:
      example:
        path: path
        denied_patterns:
        - '*.zip'
        allowed_patterns:
        - '*.jpg'
        - a*b?.png
        deny_policy: 9
      properties:
        path:
          description: exposed virtual path, if no other specific filter is defined,
            the filter applies for sub directories too. For example if filters are
            defined for the paths "/" and "/sub" then the filters for "/" are applied
            for any file outside the "/sub" directory
          type: string
        allowed_patterns:
          description: list of, case insensitive, allowed shell like patterns.
          example:
          - '*.jpg'
          - a*b?.png
          items:
            type: string
          type: array
        denied_patterns:
          description: list of, case insensitive, denied shell like patterns. Denied
            patterns are evaluated before the allowed ones
          example:
          - '*.zip'
          items:
            type: string
          type: array
        deny_policy:
          description: |
            Deny policies
              * `0` - default policy. Denied files/directories matching the filters are visible in directory listing but cannot be uploaded/downloaded/overwritten/renamed
              * `1` - deny policy hide. This policy applies the same restrictions as the default one and denied files/directories matching the filters will also be hidden in directory listing. This mode may cause performance issues for large directories
          enum:
          - 0
          - 1
          type: integer
      type: object
    HooksFilter:
      description: User specific hook overrides
      example:
        external_auth_disabled: false
        pre_login_disabled: false
        check_password_disabled: false
      properties:
        external_auth_disabled:
          description: If true, the external auth hook, if defined, will not be executed
          example: false
          type: boolean
        pre_login_disabled:
          description: If true, the pre-login hook, if defined, will not be executed
          example: false
          type: boolean
        check_password_disabled:
          description: If true, the check password hook, if defined, will not be executed
          example: false
          type: boolean
      type: object
    BandwidthLimit:
      example:
        sources:
        - sources
        - sources
        upload_bandwidth: 8
        download_bandwidth: 9
      properties:
        sources:
          description: Source networks in CIDR notation as defined in RFC 4632 and
            RFC 4291 for example `192.0.2.0/24` or `2001:db8::/32`. The limit applies
            if the defined networks contain the client IP
          items:
            type: string
          type: array
        upload_bandwidth:
          description: Maximum upload bandwidth as KB/s, 0 means unlimited
          format: int32
          type: integer
        download_bandwidth:
          description: Maximum download bandwidth as KB/s, 0 means unlimited
          format: int32
          type: integer
      type: object
    DataTransferLimit:
      example:
        sources:
        - sources
        - sources
        download_data_transfer: 3
        total_data_transfer: 6
        upload_data_transfer: 6
      properties:
        sources:
          description: Source networks in CIDR notation as defined in RFC 4632 and
            RFC 4291 for example `192.0.2.0/24` or `2001:db8::/32`. The limit applies
            if the defined networks contain the client IP
          items:
            type: string
          type: array
        upload_data_transfer:
          description: Maximum data transfer allowed for uploads as MB. 0 means no
            limit
          type: integer
        download_data_transfer:
          description: Maximum data transfer allowed for downloads as MB. 0 means
            no limit
          type: integer
        total_data_transfer:
          description: Maximum total data transfer as MB. 0 means unlimited. You can
            set a total data transfer instead of the individual values for uploads
            and downloads
          type: integer
      type: object
    UserFilters:
      description: Additional user options
      example:
        denied_ip:
        - 172.16.0.0/16
        allowed_ip:
        - 192.0.2.0/24
        - 2001:db8::/32
        allow_api_key_auth: true
        denied_login_methods:
        - null
        - null
        web_client:
        - null
        - null
        data_transfer_limits:
        - sources:
          - sources
          - sources
          download_data_transfer: 3
          total_data_transfer: 6
          upload_data_transfer: 6
        - sources:
          - sources
          - sources
          download_data_transfer: 3
          total_data_transfer: 6
          upload_data_transfer: 6
        disable_fs_checks: false
        file_patterns:
        - path: path
          denied_patterns:
          - '*.zip'
          allowed_patterns:
          - '*.jpg'
          - a*b?.png
          deny_policy: 9
        - path: path
          denied_patterns:
          - '*.zip'
          allowed_patterns:
          - '*.jpg'
          - a*b?.png
          deny_policy: 9
        recovery_codes:
        - secret:
            mode: 0
            additional_data: additional_data
            payload: payload
            key: key
            status: Plain
          used: true
        - secret:
            mode: 0
            additional_data: additional_data
            payload: payload
            key: key
            status: Plain
          used: true
        max_upload_file_size: 6
        tls_username: None
        denied_protocols:
        - null
        - null
        hooks:
          external_auth_disabled: false
          pre_login_disabled: false
          check_password_disabled: false
        bandwidth_limits:
        - sources:
          - sources
          - sources
          upload_bandwidth: 8
          download_bandwidth: 9
        - sources:
          - sources
          - sources
          upload_bandwidth: 8
          download_bandwidth: 9
      properties:
        allowed_ip:
          description: only clients connecting from these IP/Mask are allowed. IP/Mask
            must be in CIDR notation as defined in RFC 4632 and RFC 4291, for example
            "192.0.2.0/24" or "2001:db8::/32"
          example:
          - 192.0.2.0/24
          - 2001:db8::/32
          items:
            type: string
          type: array
        denied_ip:
          description: clients connecting from these IP/Mask are not allowed. Denied
            rules are evaluated before allowed ones
          example:
          - 172.16.0.0/16
          items:
            type: string
          type: array
        denied_login_methods:
          description: if null or empty any available login method is allowed
          items:
            $ref: '#/components/schemas/LoginMethods'
          type: array
        denied_protocols:
          description: if null or empty any available protocol is allowed
          items:
            $ref: '#/components/schemas/SupportedProtocols'
          type: array
        file_patterns:
          description: filters based on shell like file patterns. These restrictions
            do not apply to files listing for performance reasons, so a denied file
            cannot be downloaded/overwritten/renamed but it will still be in the list
            of files. Please note that these restrictions can be easily bypassed
          items:
            $ref: '#/components/schemas/PatternsFilter'
          type: array
        max_upload_file_size:
          description: maximum allowed size, as bytes, for a single file upload. The
            upload will be aborted if/when the size of the file being sent exceeds
            this limit. 0 means unlimited. This restriction does not apply for SSH
            system commands such as `git` and `rsync`
          format: int64
          type: integer
        tls_username:
          description: defines the TLS certificate field to use as username. For FTP
            clients it must match the name provided using the "USER" command. For
            WebDAV, if no username is provided, the CN will be used as username. For
            WebDAV clients it must match the implicit or provided username. Ignored
            if mutual TLS is disabled
          enum:
          - None
          - CommonName
          type: string
        hooks:
          $ref: '#/components/schemas/HooksFilter'
        disable_fs_checks:
          description: Disable checks for existence and automatic creation of home
            directory and virtual folders. SFTPGo requires that the user's home directory,
            virtual folder root, and intermediate paths to virtual folders exist to
            work properly. If you already know that the required directories exist,
            disabling these checks will speed up login. You could, for example, disable
            these checks after the first login
          example: false
          type: boolean
        web_client:
          description: WebClient/user REST API related configuration options
          items:
            $ref: '#/components/schemas/WebClientOptions'
          type: array
        allow_api_key_auth:
          description: API key authentication allows to impersonate this user with
            an API key
          type: boolean
        user_type:
          $ref: '#/components/schemas/UserType'
        totp_config:
          $ref: '#/components/schemas/UserTOTPConfig'
        recovery_codes:
          items:
            $ref: '#/components/schemas/RecoveryCode'
          type: array
        bandwidth_limits:
          items:
            $ref: '#/components/schemas/BandwidthLimit'
          type: array
        data_transfer_limits:
          items:
            $ref: '#/components/schemas/DataTransferLimit'
          type: array
      type: object
    Secret:
      description: The secret is encrypted before saving, so to set a new secret you
        must provide a payload and set the status to "Plain". The encryption key and
        additional data will be generated automatically. If you set the status to
        "Redacted" the existig secret will be preserved
      example:
        mode: 0
        additional_data: additional_data
        payload: payload
        key: key
        status: Plain
      properties:
        status:
          description: Set to "Plain" to add or update an existing secret, set to
            "Redacted" to preserve the existing value
          enum:
          - Plain
          - AES-256-GCM
          - Secretbox
          - GCP
          - AWS
          - VaultTransit
          - AzureKeyVault
          - Redacted
          type: string
        payload:
          type: string
        key:
          type: string
        additional_data:
          type: string
        mode:
          description: 1 means encrypted using a master key
          type: integer
      type: object
    S3Config:
      description: S3 Compatible Object Storage configuration details
      example:
        upload_part_max_time: 6
        storage_class: storage_class
        force_path_style: true
        download_part_max_time: 6
        acl: acl
        download_concurrency: 5
        bucket: bucket
        endpoint: endpoint
        upload_part_size: 1
        key_prefix: folder/subfolder/
        access_key: access_key
        access_secret:
          mode: 0
          additional_data: additional_data
          payload: payload
          key: key
          status: Plain
        download_part_size: 6
        region: region
        upload_concurrency: 2
      properties:
        bucket:
          minLength: 1
          type: string
        region:
          minLength: 1
          type: string
        access_key:
          type: string
        access_secret:
          $ref: '#/components/schemas/Secret'
        endpoint:
          description: optional endpoint
          type: string
        storage_class:
          type: string
        acl:
          description: 'The canned ACL to apply to uploaded objects. Leave empty to
            use the default ACL. For more information and available ACLs, see here:
            https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl'
          type: string
        upload_part_size:
          description: the buffer size (in MB) to use for multipart uploads. The minimum
            allowed part size is 5MB, and if this value is set to zero, the default
            value (5MB) for the AWS SDK will be used. The minimum allowed value is
            5.
          type: integer
        upload_concurrency:
          description: the number of parts to upload in parallel. If this value is
            set to zero, the default value (5) will be used
          type: integer
        upload_part_max_time:
          description: the maximum time allowed, in seconds, to upload a single chunk
            (the chunk size is defined via "upload_part_size"). 0 means no timeout
          type: integer
        download_part_size:
          description: the buffer size (in MB) to use for multipart downloads. The
            minimum allowed part size is 5MB, and if this value is set to zero, the
            default value (5MB) for the AWS SDK will be used. The minimum allowed
            value is 5. Ignored for partial downloads
          type: integer
        download_concurrency:
          description: the number of parts to download in parallel. If this value
            is set to zero, the default value (5) will be used. Ignored for partial
            downloads
          type: integer
        download_part_max_time:
          description: the maximum time allowed, in seconds, to download a single
            chunk (the chunk size is defined via "download_part_size"). 0 means no
            timeout. Ignored for partial downloads.
          type: integer
        force_path_style:
          description: Set this to "true" to force the request to use path-style addressing,
            i.e., "http://s3.amazonaws.com/BUCKET/KEY". By default, the S3 client
            will use virtual hosted bucket addressing when possible ("http://BUCKET.s3.amazonaws.com/KEY")
          type: boolean
        key_prefix:
          description: key_prefix is similar to a chroot directory for a local filesystem.
            If specified the user will only see contents that starts with this prefix
            and so you can restrict access to a specific virtual folder. The prefix,
            if not empty, must not start with "/" and must end with "/". If empty
            the whole bucket contents will be available
          example: folder/subfolder/
          type: string
      type: object
    GCSConfig:
      description: Google Cloud Storage configuration details. The "credentials" field
        must be populated only when adding/updating a user. It will be always omitted,
        since there are sensitive data, when you search/get users
      example:
        bucket: bucket
        storage_class: storage_class
        credentials:
          mode: 0
          additional_data: additional_data
          payload: payload
          key: key
          status: Plain
        automatic_credentials: 3
        key_prefix: folder/subfolder/
        acl: acl
      properties:
        bucket:
          minLength: 1
          type: string
        credentials:
          $ref: '#/components/schemas/Secret'
        automatic_credentials:
          description: |
            Automatic credentials:
              * `0` - disabled, explicit credentials, using a JSON credentials file, must be provided. This is the default value if the field is null
              * `1` - enabled, we try to use the Application Default Credentials (ADC) strategy to find your application's credentials
          enum:
          - 0
          - 1
          type: integer
        storage_class:
          type: string
        acl:
          description: 'The ACL to apply to uploaded objects. Leave empty to use the
            default ACL. For more information and available ACLs, refer to the JSON
            API here: https://cloud.google.com/storage/docs/access-control/lists#predefined-acl'
          type: string
        key_prefix:
          description: key_prefix is similar to a chroot directory for a local filesystem.
            If specified the user will only see contents that starts with this prefix
            and so you can restrict access to a specific virtual folder. The prefix,
            if not empty, must not start with "/" and must end with "/". If empty
            the whole bucket contents will be available
          example: folder/subfolder/
          type: string
      type: object
    AzureBlobFsConfig:
      description: Azure Blob Storage configuration details
      example:
        container: container
        sas_url:
          mode: 0
          additional_data: additional_data
          payload: payload
          key: key
          status: Plain
        endpoint: endpoint
        upload_part_size: 3
        key_prefix: folder/subfolder/
        account_name: account_name
        account_key:
          mode: 0
          additional_data: additional_data
          payload: payload
          key: key
          status: Plain
        access_tier: ""
        use_emulator: true
        upload_concurrency: 7
      properties:
        container:
          type: string
        account_name:
          description: Storage Account Name, leave blank to use SAS URL
          type: string
        account_key:
          $ref: '#/components/schemas/Secret'
        sas_url:
          $ref: '#/components/schemas/Secret'
        endpoint:
          description: optional endpoint. Default is "blob.core.windows.net". If you
            use the emulator the endpoint must include the protocol, for example "http://127.0.0.1:10000"
          type: string
        upload_part_size:
          description: the buffer size (in MB) to use for multipart uploads. If this
            value is set to zero, the default value (4MB) will be used.
          type: integer
        upload_concurrency:
          description: the number of parts to upload in parallel. If this value is
            set to zero, the default value (2) will be used
          type: integer
        access_tier:
          enum:
          - ""
          - Archive
          - Hot
          - Cool
          type: string
        key_prefix:
          description: key_prefix is similar to a chroot directory for a local filesystem.
            If specified the user will only see contents that starts with this prefix
            and so you can restrict access to a specific virtual folder. The prefix,
            if not empty, must not start with "/" and must end with "/". If empty
            the whole container contents will be available
          example: folder/subfolder/
          type: string
        use_emulator:
          type: boolean
      type: object
    CryptFsConfig:
      description: Crypt filesystem configuration details
      example:
        passphrase:
          mode: 0
          additional_data: additional_data
          payload: payload
          key: key
          status: Plain
      properties:
        passphrase:
          $ref: '#/components/schemas/Secret'
      type: object
    SFTPFsConfig:
      example:
        endpoint: endpoint
        password:
          mode: 0
          additional_data: additional_data
          payload: payload
          key: key
          status: Plain
        disable_concurrent_reads: true
        prefix: prefix
        buffer_size: 2
        private_key:
          mode: 0
          additional_data: additional_data
          payload: payload
          key: key
          status: Plain
        username: username
        fingerprints:
        - fingerprints
        - fingerprints
      properties:
        endpoint:
          description: remote SFTP endpoint as host:port
          type: string
        username:
          description: you can specify a password or private key or both. In the latter
            case the private key will be tried first.
          type: string
        password:
          $ref: '#/components/schemas/Secret'
        private_key:
          $ref: '#/components/schemas/Secret'
        fingerprints:
          description: SHA256 fingerprints to use for host key verification. If you
            don't provide any fingerprint the remote host key will not be verified,
            this is a security risk
          items:
            type: string
          type: array
        prefix:
          description: Specifying a prefix you can restrict all operations to a given
            path within the remote SFTP server.
          type: string
        disable_concurrent_reads:
          description: Concurrent reads are safe to use and disabling them will degrade
            performance. Some servers automatically delete files once they are downloaded.
            Using concurrent reads is problematic with such servers.
          type: boolean
        buffer_size:
          description: The size of the buffer (in MB) to use for transfers. By enabling
            buffering, the reads and writes, from/to the remote SFTP server, are split
            in multiple concurrent requests and this allows data to be transferred
            at a faster rate, over high latency networks, by overlapping round-trip
            times. With buffering enabled, resuming uploads is not supported and a
            file cannot be opened for both reading and writing at the same time. 0
            means disabled.
          example: 2
          maximum: 16
          minimum: 0
          type: integer
      type: object
    FilesystemConfig:
      description: Storage filesystem details
      example:
        gcsconfig:
          bucket: bucket
          storage_class: storage_class
          credentials:
            mode: 0
            additional_data: additional_data
            payload: payload
            key: key
            status: Plain
          automatic_credentials: 3
          key_prefix: folder/subfolder/
          acl: acl
        sftpconfig:
          endpoint: endpoint
          password:
            mode: 0
            additional_data: additional_data
            payload: payload
            key: key
            status: Plain
          disable_concurrent_reads: true
          prefix: prefix
          buffer_size: 2
          private_key:
            mode: 0
            additional_data: additional_data
            payload: payload
            key: key
            status: Plain
          username: username
          fingerprints:
          - fingerprints
          - fingerprints
        cryptconfig:
          passphrase:
            mode: 0
            additional_data: additional_data
            payload: payload
            key: key
            status: Plain
        azblobconfig:
          container: container
          sas_url:
            mode: 0
            additional_data: additional_data
            payload: payload
            key: key
            status: Plain
          endpoint: endpoint
          upload_part_size: 3
          key_prefix: folder/subfolder/
          account_name: account_name
          account_key:
            mode: 0
            additional_data: additional_data
            payload: payload
            key: key
            status: Plain
          access_tier: ""
          use_emulator: true
          upload_concurrency: 7
        s3config:
          upload_part_max_time: 6
          storage_class: storage_class
          force_path_style: true
          download_part_max_time: 6
          acl: acl
          download_concurrency: 5
          bucket: bucket
          endpoint: endpoint
          upload_part_size: 1
          key_prefix: folder/subfolder/
          access_key: access_key
          access_secret:
            mode: 0
            additional_data: additional_data
            payload: payload
            key: key
            status: Plain
          download_part_size: 6
          region: region
          upload_concurrency: 2
      properties:
        provider:
          $ref: '#/components/schemas/FsProviders'
        s3config:
          $ref: '#/components/schemas/S3Config'
        gcsconfig:
          $ref: '#/components/schemas/GCSConfig'
        azblobconfig:
          $ref: '#/components/schemas/AzureBlobFsConfig'
        cryptconfig:
          $ref: '#/components/schemas/CryptFsConfig'
        sftpconfig:
          $ref: '#/components/schemas/SFTPFsConfig'
      type: object
    BaseVirtualFolder:
      description: Defines the filesystem for the virtual folder and the used quota
        limits. The same folder can be shared among multiple users and each user can
        have different quota limits or a different virtual path.
      example:
        mapped_path: mapped_path
        used_quota_size: 6
        last_quota_update: 5
        name: name
        used_quota_files: 1
        description: description
        id: 1
        users:
        - users
        - users
        filesystem:
          gcsconfig:
            bucket: bucket
            storage_class: storage_class
            credentials:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
            automatic_credentials: 3
            key_prefix: folder/subfolder/
            acl: acl
          sftpconfig:
            endpoint: endpoint
            password:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
            disable_concurrent_reads: true
            prefix: prefix
            buffer_size: 2
            private_key:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
            username: username
            fingerprints:
            - fingerprints
            - fingerprints
          cryptconfig:
            passphrase:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
          azblobconfig:
            container: container
            sas_url:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
            endpoint: endpoint
            upload_part_size: 3
            key_prefix: folder/subfolder/
            account_name: account_name
            account_key:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
            access_tier: ""
            use_emulator: true
            upload_concurrency: 7
          s3config:
            upload_part_max_time: 6
            storage_class: storage_class
            force_path_style: true
            download_part_max_time: 6
            acl: acl
            download_concurrency: 5
            bucket: bucket
            endpoint: endpoint
            upload_part_size: 1
            key_prefix: folder/subfolder/
            access_key: access_key
            access_secret:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
            download_part_size: 6
            region: region
            upload_concurrency: 2
      properties:
        id:
          format: int32
          minimum: 1
          type: integer
        name:
          description: unique name for this virtual folder
          type: string
        mapped_path:
          description: absolute filesystem path to use as virtual folder
          type: string
        description:
          description: optional description
          type: string
        used_quota_size:
          format: int64
          type: integer
        used_quota_files:
          format: int32
          type: integer
        last_quota_update:
          description: Last quota update as unix timestamp in milliseconds
          format: int64
          type: integer
        users:
          description: list of usernames associated with this virtual folder
          items:
            type: string
          type: array
        filesystem:
          $ref: '#/components/schemas/FilesystemConfig'
      type: object
    VirtualFolder:
      allOf:
      - $ref: '#/components/schemas/BaseVirtualFolder'
      - $ref: '#/components/schemas/VirtualFolder_allOf'
      description: A virtual folder is a mapping between a SFTPGo virtual path and
        a filesystem path outside the user home directory. The specified paths must
        be absolute and the virtual path cannot be "/", it must be a sub directory.
        The parent directory for the specified virtual path must exist. SFTPGo will
        try to automatically create any missing parent directory for the configured
        virtual folders at user login.
    User:
      example:
        used_download_data_transfer: 1
        gid: 1210617418
        max_sessions: 2
        download_data_transfer: 1
        description: description
        created_at: 4
        expiration_date: 1
        upload_data_transfer: 1
        public_keys:
        - ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEUWwDwEWhTbF0MqAsp/oXK1HR2cElhM8oo1uVmL3ZeDKDiTm4ljMr92wfTgIGDqIoxmVqgYIkAOAhuykAVWBzc=
          user@host
        - ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEUWwDwEWhTbF0MqAsp/oXK1HR2cElhM8oo1uVmL3ZeDKDiTm4ljMr92wfTgIGDqIoxmVqgYIkAOAhuykAVWBzc=
          user@host
        virtual_folders:
        - null
        - null
        uid: 1280358508
        used_quota_size: 3
        password: password
        last_quota_update: 4
        updated_at: 5
        permissions:
          /:
          - '*'
          /somedir:
          - list
          - download
        used_quota_files: 2
        id: 1
        email: email
        used_upload_data_transfer: 7
        last_login: 9
        home_dir: home_dir
        total_data_transfer: 6
        filters:
          denied_ip:
          - 172.16.0.0/16
          allowed_ip:
          - 192.0.2.0/24
          - 2001:db8::/32
          allow_api_key_auth: true
          denied_login_methods:
          - null
          - null
          web_client:
          - null
          - null
          data_transfer_limits:
          - sources:
            - sources
            - sources
            download_data_transfer: 3
            total_data_transfer: 6
            upload_data_transfer: 6
          - sources:
            - sources
            - sources
            download_data_transfer: 3
            total_data_transfer: 6
            upload_data_transfer: 6
          disable_fs_checks: false
          file_patterns:
          - path: path
            denied_patterns:
            - '*.zip'
            allowed_patterns:
            - '*.jpg'
            - a*b?.png
            deny_policy: 9
          - path: path
            denied_patterns:
            - '*.zip'
            allowed_patterns:
            - '*.jpg'
            - a*b?.png
            deny_policy: 9
          recovery_codes:
          - secret:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
            used: true
          - secret:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
            used: true
          max_upload_file_size: 6
          tls_username: None
          denied_protocols:
          - null
          - null
          hooks:
            external_auth_disabled: false
            pre_login_disabled: false
            check_password_disabled: false
          bandwidth_limits:
          - sources:
            - sources
            - sources
            upload_bandwidth: 8
            download_bandwidth: 9
          - sources:
            - sources
            - sources
            upload_bandwidth: 8
            download_bandwidth: 9
        filesystem:
          gcsconfig:
            bucket: bucket
            storage_class: storage_class
            credentials:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
            automatic_credentials: 3
            key_prefix: folder/subfolder/
            acl: acl
          sftpconfig:
            endpoint: endpoint
            password:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
            disable_concurrent_reads: true
            prefix: prefix
            buffer_size: 2
            private_key:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
            username: username
            fingerprints:
            - fingerprints
            - fingerprints
          cryptconfig:
            passphrase:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
          azblobconfig:
            container: container
            sas_url:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
            endpoint: endpoint
            upload_part_size: 3
            key_prefix: folder/subfolder/
            account_name: account_name
            account_key:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
            access_tier: ""
            use_emulator: true
            upload_concurrency: 7
          s3config:
            upload_part_max_time: 6
            storage_class: storage_class
            force_path_style: true
            download_part_max_time: 6
            acl: acl
            download_concurrency: 5
            bucket: bucket
            endpoint: endpoint
            upload_part_size: 1
            key_prefix: folder/subfolder/
            access_key: access_key
            access_secret:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
            download_part_size: 6
            region: region
            upload_concurrency: 2
        quota_files: 9
        download_bandwidth: 1
        quota_size: 7
        additional_info: additional_info
        upload_bandwidth: 7
        status: 6
        username: username
      properties:
        id:
          format: int32
          minimum: 1
          type: integer
        status:
          description: |
            status:
              * `0` user is disabled, login is not allowed
              * `1` user is enabled
          enum:
          - 0
          - 1
          type: integer
        username:
          description: username is unique
          type: string
        email:
          format: email
          type: string
        description:
          description: optional description, for example the user full name
          type: string
        expiration_date:
          description: expiration date as unix timestamp in milliseconds. An expired
            account cannot login. 0 means no expiration
          format: int64
          type: integer
        password:
          description: password or public key/SSH user certificate are mandatory.
            If the password has no known hashing algo prefix it will be stored, by
            default, using bcrypt, argon2id is supported too. You can send a password
            hashed as bcrypt ($2a$ prefix), argon2id, pbkdf2 or unix crypt and it
            will be stored as is. For security reasons this field is omitted when
            you search/get users
          format: password
          type: string
        public_keys:
          description: Public keys in OpenSSH format. A password or at least one public
            key/SSH user certificate are mandatory.
          items:
            example: ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEUWwDwEWhTbF0MqAsp/oXK1HR2cElhM8oo1uVmL3ZeDKDiTm4ljMr92wfTgIGDqIoxmVqgYIkAOAhuykAVWBzc=
              user@host
            type: string
          type: array
        home_dir:
          description: path to the user home directory. The user cannot upload or
            download files outside this directory. SFTPGo tries to automatically create
            this folder if missing. Must be an absolute path
          type: string
        virtual_folders:
          description: mapping between virtual SFTPGo paths and filesystem paths outside
            the user home directory. Supported for local filesystem only. If one or
            more of the specified folders are not inside the dataprovider they will
            be automatically created. You have to create the folder on the filesystem
            yourself
          items:
            $ref: '#/components/schemas/VirtualFolder'
          type: array
        uid:
          description: if you run SFTPGo as root user, the created files and directories
            will be assigned to this uid. 0 means no change, the owner will be the
            user that runs SFTPGo. Ignored on windows
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
        gid:
          description: if you run SFTPGo as root user, the created files and directories
            will be assigned to this gid. 0 means no change, the group will be the
            one of the user that runs SFTPGo. Ignored on windows
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
        max_sessions:
          description: Limit the sessions that a user can open. 0 means unlimited
          format: int32
          type: integer
        quota_size:
          description: Quota as size in bytes. 0 menas unlimited. Please note that
            quota is updated if files are added/removed via SFTPGo otherwise a quota
            scan or a manual quota update is needed
          format: int64
          type: integer
        quota_files:
          description: Quota as number of files. 0 menas unlimited. Please note that
            quota is updated if files are added/removed via SFTPGo otherwise a quota
            scan or a manual quota update is needed
          format: int32
          type: integer
        permissions:
          example:
            /:
            - '*'
            /somedir:
            - list
            - download
          items:
            $ref: '#/components/schemas/DirPermissions'
          minItems: 1
          type: array
        used_quota_size:
          format: int64
          type: integer
        used_quota_files:
          format: int32
          type: integer
        last_quota_update:
          description: Last quota update as unix timestamp in milliseconds
          format: int64
          type: integer
        upload_bandwidth:
          description: Maximum upload bandwidth as KB/s, 0 means unlimited
          type: integer
        download_bandwidth:
          description: Maximum download bandwidth as KB/s, 0 means unlimited
          type: integer
        upload_data_transfer:
          description: Maximum data transfer allowed for uploads as MB. 0 means no
            limit
          type: integer
        download_data_transfer:
          description: Maximum data transfer allowed for downloads as MB. 0 means
            no limit
          type: integer
        total_data_transfer:
          description: Maximum total data transfer as MB. 0 means unlimited. You can
            set a total data transfer instead of the individual values for uploads
            and downloads
          type: integer
        used_upload_data_transfer:
          description: Uploaded size, as bytes, since the last reset
          type: integer
        used_download_data_transfer:
          description: Downloaded size, as bytes, since the last reset
          type: integer
        created_at:
          description: creation time as unix timestamp in milliseconds. It will be
            0 for users created before v2.2.0
          format: int64
          type: integer
        updated_at:
          description: last update time as unix timestamp in milliseconds
          format: int64
          type: integer
        last_login:
          description: Last user login as unix timestamp in milliseconds. It is saved
            at most once every 10 minutes
          format: int64
          type: integer
        filters:
          $ref: '#/components/schemas/UserFilters'
        filesystem:
          $ref: '#/components/schemas/FilesystemConfig'
        additional_info:
          description: Free form text field for external systems
          type: string
      type: object
    AdminFilters:
      example:
        allow_list:
        - 192.0.2.0/24
        - 2001:db8::/32
        recovery_codes:
        - secret:
            mode: 0
            additional_data: additional_data
            payload: payload
            key: key
            status: Plain
          used: true
        - secret:
            mode: 0
            additional_data: additional_data
            payload: payload
            key: key
            status: Plain
          used: true
        allow_api_key_auth: true
      properties:
        allow_list:
          description: only clients connecting from these IP/Mask are allowed. IP/Mask
            must be in CIDR notation as defined in RFC 4632 and RFC 4291, for example
            "192.0.2.0/24" or "2001:db8::/32"
          example:
          - 192.0.2.0/24
          - 2001:db8::/32
          items:
            type: string
          type: array
        allow_api_key_auth:
          description: API key auth allows to impersonate this administrator with
            an API key
          type: boolean
        totp_config:
          $ref: '#/components/schemas/AdminTOTPConfig'
        recovery_codes:
          items:
            $ref: '#/components/schemas/RecoveryCode'
          type: array
      type: object
    Admin:
      example:
        password: password
        updated_at: 5
        additional_info: additional_info
        permissions:
        - null
        - null
        last_login: 5
        description: description
        created_at: 1
        id: 1
        filters:
          allow_list:
          - 192.0.2.0/24
          - 2001:db8::/32
          recovery_codes:
          - secret:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
            used: true
          - secret:
              mode: 0
              additional_data: additional_data
              payload: payload
              key: key
              status: Plain
            used: true
          allow_api_key_auth: true
        email: email
        status: 6
        username: username
      properties:
        id:
          format: int32
          minimum: 1
          type: integer
        status:
          description: |
            status:
              * `0` user is disabled, login is not allowed
              * `1` user is enabled
          enum:
          - 0
          - 1
          type: integer
        username:
          description: username is unique
          type: string
        description:
          description: optional description, for example the admin full name
          type: string
        password:
          description: Admin password. For security reasons this field is omitted
            when you search/get admins
          format: password
          type: string
        email:
          format: email
          type: string
        permissions:
          items:
            $ref: '#/components/schemas/AdminPermissions'
          type: array
        filters:
          $ref: '#/components/schemas/AdminFilters'
        additional_info:
          description: Free form text field
          type: string
        created_at:
          description: creation time as unix timestamp in milliseconds. It will be
            0 for admins created before v2.2.0
          format: int64
          type: integer
        updated_at:
          description: last update time as unix timestamp in milliseconds
          format: int64
          type: integer
        last_login:
          description: Last user login as unix timestamp in milliseconds. It is saved
            at most once every 10 minutes
          format: int64
          type: integer
      type: object
    AdminProfile:
      example:
        description: description
        email: email
        allow_api_key_auth: true
      properties:
        email:
          format: email
          type: string
        description:
          type: string
        allow_api_key_auth:
          description: If enabled, you can impersonate this admin, in REST API, using
            an API key. If disabled admin credentials are required for impersonation
          type: boolean
      type: object
    UserProfile:
      example:
        public_keys:
        - ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEUWwDwEWhTbF0MqAsp/oXK1HR2cElhM8oo1uVmL3ZeDKDiTm4ljMr92wfTgIGDqIoxmVqgYIkAOAhuykAVWBzc=
          user@host
        - ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEUWwDwEWhTbF0MqAsp/oXK1HR2cElhM8oo1uVmL3ZeDKDiTm4ljMr92wfTgIGDqIoxmVqgYIkAOAhuykAVWBzc=
          user@host
        description: description
        email: email
        allow_api_key_auth: true
      properties:
        email:
          format: email
          type: string
        description:
          type: string
        allow_api_key_auth:
          description: If enabled, you can impersonate this user, in REST API, using
            an API key. If disabled user credentials are required for impersonation
          type: boolean
        public_keys:
          items:
            description: Public keys in OpenSSH format
            example: ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEUWwDwEWhTbF0MqAsp/oXK1HR2cElhM8oo1uVmL3ZeDKDiTm4ljMr92wfTgIGDqIoxmVqgYIkAOAhuykAVWBzc=
              user@host
            type: string
          type: array
      type: object
    AuthAPIKey:
      example:
        expires_at: 5
        updated_at: 6
        last_use_at: 1
        name: name
        created_at: 0
        description: description
        admin: admin
        id: id
        user: user
        key: key
      properties:
        id:
          description: unique key identifier
          type: string
        name:
          description: User friendly key name
          type: string
        key:
          description: We store the hash of the key. This is just like a password.
            For security reasons this field is omitted when you search/get API keys
          format: password
          type: string
        scope:
          $ref: '#/components/schemas/AuthAPIKeyScope'
        created_at:
          description: creation time as unix timestamp in milliseconds
          format: int64
          type: integer
        updated_at:
          description: last update time as unix timestamp in milliseconds
          format: int64
          type: integer
        last_use_at:
          description: last use time as unix timestamp in milliseconds. It is saved
            at most once every 10 minutes
          format: int64
          type: integer
        expires_at:
          description: expiration time as unix timestamp in milliseconds
          format: int64
          type: integer
        description:
          description: optional description
          type: string
        user:
          description: username associated with this API key. If empty and the scope
            is "user scope" the key can impersonate any user
          type: string
        admin:
          description: admin associated with this API key. If empty and the scope
            is "admin scope" the key can impersonate any admin
          type: string
      type: object
    QuotaUsage:
      example:
        used_quota_size: 0
        used_quota_files: 6
      properties:
        used_quota_size:
          format: int64
          type: integer
        used_quota_files:
          format: int32
          type: integer
      type: object
    TransferQuotaUsage:
      example:
        used_download_data_transfer: 6
        used_upload_data_transfer: 0
      properties:
        used_upload_data_transfer:
          description: The value must be specified as bytes
          format: int64
          type: integer
        used_download_data_transfer:
          description: The value must be specified as bytes
          format: int64
          type: integer
      type: object
    Transfer:
      example:
        path: path
        start_time: 1
        operation_type: upload
        size: 5
      properties:
        operation_type:
          description: |
            Operations:
              * `upload`
              * `download`
          enum:
          - upload
          - download
          type: string
        path:
          description: file path for the upload/download
          type: string
        start_time:
          description: start time as unix timestamp in milliseconds
          format: int64
          type: integer
        size:
          description: bytes transferred
          format: int64
          type: integer
      type: object
    ConnectionStatus:
      example:
        connection_time: 0
        protocol: SFTP
        last_activity: 6
        connection_id: connection_id
        active_transfers:
        - path: path
          start_time: 1
          operation_type: upload
          size: 5
        - path: path
          start_time: 1
          operation_type: upload
          size: 5
        remote_address: remote_address
        client_version: client_version
        command: command
        username: username
      properties:
        username:
          description: connected username
          type: string
        connection_id:
          description: unique connection identifier
          type: string
        client_version:
          description: client version
          type: string
        remote_address:
          description: Remote address for the connected client
          type: string
        connection_time:
          description: connection time as unix timestamp in milliseconds
          format: int64
          type: integer
        command:
          description: Last SSH/FTP command or WebDAV method
          type: string
        last_activity:
          description: last client activity as unix timestamp in milliseconds
          format: int64
          type: integer
        protocol:
          enum:
          - SFTP
          - SCP
          - SSH
          - FTP
          - DAV
          type: string
        active_transfers:
          items:
            $ref: '#/components/schemas/Transfer'
          type: array
      type: object
    FolderRetention:
      example:
        path: /
        ignore_user_permissions: true
        retention: 24
        delete_empty_dirs: true
      properties:
        path:
          description: exposed virtual directory path, if no other specific retention
            is defined, the retention applies for sub directories too. For example
            if retention is defined for the paths "/" and "/sub" then the retention
            for "/" is applied for any file outside the "/sub" directory
          example: /
          type: string
        retention:
          description: retention time in hours. All the files with a modification
            time older than the defined value will be deleted. 0 means exclude this
            path
          example: 24
          type: integer
        delete_empty_dirs:
          description: if enabled, empty directories will be deleted
          type: boolean
        ignore_user_permissions:
          description: if enabled, files will be deleted even if the user does not
            have the delete permission. The default is "false" which means that files
            will be skipped if the user does not have permission to delete them. File
            patterns filters will always be silently ignored
          type: boolean
      type: object
    RetentionCheck:
      example:
        start_time: 0
        folders:
        - path: /
          ignore_user_permissions: true
          retention: 24
          delete_empty_dirs: true
        - path: /
          ignore_user_permissions: true
          retention: 24
          delete_empty_dirs: true
        notifications:
        - null
        - null
        email: email
        username: username
      properties:
        username:
          description: username to which the retention check refers
          type: string
        folders:
          items:
            $ref: '#/components/schemas/FolderRetention'
          type: array
        start_time:
          description: check start time as unix timestamp in milliseconds
          format: int64
          type: integer
        notifications:
          items:
            $ref: '#/components/schemas/RetentionCheckNotification'
          type: array
        email:
          description: if the notification method is set to "Email", this is the e-mail
            address that receives the retention check report. This field is automatically
            set to the email address associated with the administrator starting the
            check
          format: email
          type: string
      type: object
    MetadataCheck:
      example:
        start_time: 0
        username: username
      properties:
        username:
          description: username to which the check refers
          type: string
        start_time:
          description: check start time as unix timestamp in milliseconds
          format: int64
          type: integer
      type: object
    QuotaScan:
      example:
        start_time: 0
        username: username
      properties:
        username:
          description: username to which the quota scan refers
          type: string
        start_time:
          description: scan start time as unix timestamp in milliseconds
          format: int64
          type: integer
      type: object
    FolderQuotaScan:
      example:
        start_time: 0
        name: name
      properties:
        name:
          description: folder name to which the quota scan refers
          type: string
        start_time:
          description: scan start time as unix timestamp in milliseconds
          format: int64
          type: integer
      type: object
    DefenderEntry:
      example:
        score: 0
        ip: ip
        ban_time: 2000-01-23T04:56:07.000+00:00
        id: id
      properties:
        id:
          type: string
        ip:
          type: string
        score:
          description: the score increases whenever a violation is detected, such
            as an attempt to log in using an incorrect password or invalid username.
            If the score exceeds the configured threshold, the IP is banned. Omitted
            for banned IPs
          type: integer
        ban_time:
          description: date time until the IP is banned. For already banned hosts,
            the ban time is increased each time a new violation is detected. Omitted
            if the IP is not banned
          format: date-time
          type: string
      type: object
    SSHHostKey:
      example:
        path: path
        fingerprint: fingerprint
      properties:
        path:
          type: string
        fingerprint:
          type: string
      type: object
    SSHBinding:
      example:
        address: address
        apply_proxy_config: true
        port: 0
      properties:
        address:
          description: TCP address the server listen on
          type: string
        port:
          description: the port used for serving requests
          type: integer
        apply_proxy_config:
          description: apply the proxy configuration, if any
          type: boolean
      type: object
    WebDAVBinding:
      example:
        client_auth_type: 9
        address: address
        port: 7
        enable_https: true
      properties:
        address:
          description: TCP address the server listen on
          type: string
        port:
          description: the port used for serving requests
          type: integer
        enable_https:
          type: boolean
        client_auth_type:
          description: 1 means that client certificate authentication is required
            in addition to HTTP basic authentication
          type: integer
      type: object
    FTPDBinding:
      example:
        force_passive_ip: force_passive_ip
        client_auth_type: 5
        address: address
        apply_proxy_config: true
        tls_mode: 1
        port: 6
      properties:
        address:
          description: TCP address the server listen on
          type: string
        port:
          description: the port used for serving requests
          type: integer
        apply_proxy_config:
          description: apply the proxy configuration, if any
          type: boolean
        tls_mode:
          description: |
            TLS mode:
              * `0` - clear or explicit TLS
              * `1` - explicit TLS required
              * `2` - implicit TLS
          enum:
          - 0
          - 1
          - 2
          type: integer
        force_passive_ip:
          description: External IP address to expose for passive connections
          type: string
        client_auth_type:
          description: 1 means that client certificate authentication is required
            in addition to FTP authentication
          type: integer
      type: object
    SSHServiceStatus:
      example:
        host_keys:
        - path: path
          fingerprint: fingerprint
        - path: path
          fingerprint: fingerprint
        is_active: true
        ssh_commands:
        - ssh_commands
        - ssh_commands
        bindings:
        - address: address
          apply_proxy_config: true
          port: 0
        - address: address
          apply_proxy_config: true
          port: 0
      properties:
        is_active:
          type: boolean
        bindings:
          items:
            $ref: '#/components/schemas/SSHBinding'
          nullable: true
          type: array
        host_keys:
          items:
            $ref: '#/components/schemas/SSHHostKey'
          nullable: true
          type: array
        ssh_commands:
          items:
            type: string
          type: array
      type: object
    FTPPassivePortRange:
      example:
        start: 5
        end: 2
      properties:
        start:
          type: integer
        end:
          type: integer
      type: object
    FTPServiceStatus:
      example:
        is_active: true
        bindings:
        - force_passive_ip: force_passive_ip
          client_auth_type: 5
          address: address
          apply_proxy_config: true
          tls_mode: 1
          port: 6
        - force_passive_ip: force_passive_ip
          client_auth_type: 5
          address: address
          apply_proxy_config: true
          tls_mode: 1
          port: 6
        passive_port_range:
          start: 5
          end: 2
      properties:
        is_active:
          type: boolean
        bindings:
          items:
            $ref: '#/components/schemas/FTPDBinding'
          nullable: true
          type: array
        passive_port_range:
          $ref: '#/components/schemas/FTPPassivePortRange'
      type: object
    WebDAVServiceStatus:
      example:
        is_active: true
        bindings:
        - client_auth_type: 9
          address: address
          port: 7
          enable_https: true
        - client_auth_type: 9
          address: address
          port: 7
          enable_https: true
      properties:
        is_active:
          type: boolean
        bindings:
          items:
            $ref: '#/components/schemas/WebDAVBinding'
          nullable: true
          type: array
      type: object
    DataProviderStatus:
      example:
        is_active: true
        driver: driver
        error: error
      properties:
        is_active:
          type: boolean
        driver:
          type: string
        error:
          type: string
      type: object
    MFAStatus:
      example:
        is_active: true
        totp_configs:
        - name: name
          issuer: issuer
        - name: name
          issuer: issuer
      properties:
        is_active:
          type: boolean
        totp_configs:
          items:
            $ref: '#/components/schemas/TOTPConfig'
          type: array
      type: object
    ServicesStatus:
      example:
        ftp:
          is_active: true
          bindings:
          - force_passive_ip: force_passive_ip
            client_auth_type: 5
            address: address
            apply_proxy_config: true
            tls_mode: 1
            port: 6
          - force_passive_ip: force_passive_ip
            client_auth_type: 5
            address: address
            apply_proxy_config: true
            tls_mode: 1
            port: 6
          passive_port_range:
            start: 5
            end: 2
        ssh:
          host_keys:
          - path: path
            fingerprint: fingerprint
          - path: path
            fingerprint: fingerprint
          is_active: true
          ssh_commands:
          - ssh_commands
          - ssh_commands
          bindings:
          - address: address
            apply_proxy_config: true
            port: 0
          - address: address
            apply_proxy_config: true
            port: 0
        mfa:
          is_active: true
          totp_configs:
          - name: name
            issuer: issuer
          - name: name
            issuer: issuer
        data_provider:
          is_active: true
          driver: driver
          error: error
        webdav:
          is_active: true
          bindings:
          - client_auth_type: 9
            address: address
            port: 7
            enable_https: true
          - client_auth_type: 9
            address: address
            port: 7
            enable_https: true
        defender:
          is_active: true
      properties:
        ssh:
          $ref: '#/components/schemas/SSHServiceStatus'
        ftp:
          $ref: '#/components/schemas/FTPServiceStatus'
        webdav:
          $ref: '#/components/schemas/WebDAVServiceStatus'
        data_provider:
          $ref: '#/components/schemas/DataProviderStatus'
        defender:
          $ref: '#/components/schemas/ServicesStatus_defender'
        mfa:
          $ref: '#/components/schemas/MFAStatus'
      type: object
    BanStatus:
      example:
        date_time: 2000-01-23T04:56:07.000+00:00
      properties:
        date_time:
          description: if null the host is not banned
          format: date-time
          nullable: true
          type: string
      type: object
    ScoreStatus:
      example:
        score: 0
      properties:
        score:
          description: if 0 the host is not listed
          type: integer
      type: object
    Share:
      example:
        allow_from:
        - 192.0.2.0/24
        - 2001:db8::/32
        last_use_at: 1
        max_tokens: 5
        description: description
        created_at: 0
        password: password
        expires_at: 5
        updated_at: 6
        used_tokens: 2
        paths:
        - /dir1
        - /dir2/file.txt
        - /dir3/subdir
        name: name
        id: id
        username: username
      properties:
        id:
          description: auto-generated unique share identifier
          type: string
        name:
          type: string
        description:
          description: optional description
          type: string
        scope:
          $ref: '#/components/schemas/ShareScope'
        paths:
          description: paths to files or directories, for share scope write this array
            must contain exactly one directory. Paths will not be validated on save
            so you can also create them after creating the share
          example:
          - /dir1
          - /dir2/file.txt
          - /dir3/subdir
          items:
            type: string
          type: array
        username:
          type: string
        created_at:
          description: creation time as unix timestamp in milliseconds
          format: int64
          type: integer
        updated_at:
          description: last update time as unix timestamp in milliseconds
          format: int64
          type: integer
        last_use_at:
          description: last use time as unix timestamp in milliseconds
          format: int64
          type: integer
        expires_at:
          description: optional share expiration, as unix timestamp in milliseconds.
            0 means no expiration
          format: int64
          type: integer
        password:
          description: optional password to protect the share. The special value "[**redacted**]"
            means that a password has been set, you can use this value if you want
            to preserve the current password when you update a share
          type: string
        max_tokens:
          description: maximum allowed access tokens. 0 means no limit
          type: integer
        used_tokens:
          type: integer
        allow_from:
          description: Limit the share availability to these IP/Mask. IP/Mask must
            be in CIDR notation as defined in RFC 4632 and RFC 4291, for example "192.0.2.0/24"
            or "2001:db8::/32". An empty list means no restrictions
          example:
          - 192.0.2.0/24
          - 2001:db8::/32
          items:
            type: string
          type: array
      type: object
    BackupData:
      example:
        shares:
        - allow_from:
          - 192.0.2.0/24
          - 2001:db8::/32
          last_use_at: 1
          max_tokens: 5
          description: description
          created_at: 0
          password: password
          expires_at: 5
          updated_at: 6
          used_tokens: 2
          paths:
          - /dir1
          - /dir2/file.txt
          - /dir3/subdir
          name: name
          id: id
          username: username
        - allow_from:
          - 192.0.2.0/24
          - 2001:db8::/32
          last_use_at: 1
          max_tokens: 5
          description: description
          created_at: 0
          password: password
          expires_at: 5
          updated_at: 6
          used_tokens: 2
          paths:
          - /dir1
          - /dir2/file.txt
          - /dir3/subdir
          name: name
          id: id
          username: username
        folders:
        - mapped_path: mapped_path
          used_quota_size: 6
          last_quota_update: 5
          name: name
          used_quota_files: 1
          description: description
          id: 1
          users:
          - users
          - users
          filesystem:
            gcsconfig:
              bucket: bucket
              storage_class: storage_class
              credentials:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              automatic_credentials: 3
              key_prefix: folder/subfolder/
              acl: acl
            sftpconfig:
              endpoint: endpoint
              password:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              disable_concurrent_reads: true
              prefix: prefix
              buffer_size: 2
              private_key:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              username: username
              fingerprints:
              - fingerprints
              - fingerprints
            cryptconfig:
              passphrase:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
            azblobconfig:
              container: container
              sas_url:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              endpoint: endpoint
              upload_part_size: 3
              key_prefix: folder/subfolder/
              account_name: account_name
              account_key:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              access_tier: ""
              use_emulator: true
              upload_concurrency: 7
            s3config:
              upload_part_max_time: 6
              storage_class: storage_class
              force_path_style: true
              download_part_max_time: 6
              acl: acl
              download_concurrency: 5
              bucket: bucket
              endpoint: endpoint
              upload_part_size: 1
              key_prefix: folder/subfolder/
              access_key: access_key
              access_secret:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              download_part_size: 6
              region: region
              upload_concurrency: 2
        - mapped_path: mapped_path
          used_quota_size: 6
          last_quota_update: 5
          name: name
          used_quota_files: 1
          description: description
          id: 1
          users:
          - users
          - users
          filesystem:
            gcsconfig:
              bucket: bucket
              storage_class: storage_class
              credentials:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              automatic_credentials: 3
              key_prefix: folder/subfolder/
              acl: acl
            sftpconfig:
              endpoint: endpoint
              password:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              disable_concurrent_reads: true
              prefix: prefix
              buffer_size: 2
              private_key:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              username: username
              fingerprints:
              - fingerprints
              - fingerprints
            cryptconfig:
              passphrase:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
            azblobconfig:
              container: container
              sas_url:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              endpoint: endpoint
              upload_part_size: 3
              key_prefix: folder/subfolder/
              account_name: account_name
              account_key:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              access_tier: ""
              use_emulator: true
              upload_concurrency: 7
            s3config:
              upload_part_max_time: 6
              storage_class: storage_class
              force_path_style: true
              download_part_max_time: 6
              acl: acl
              download_concurrency: 5
              bucket: bucket
              endpoint: endpoint
              upload_part_size: 1
              key_prefix: folder/subfolder/
              access_key: access_key
              access_secret:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              download_part_size: 6
              region: region
              upload_concurrency: 2
        api_keys:
        - expires_at: 5
          updated_at: 6
          last_use_at: 1
          name: name
          created_at: 0
          description: description
          admin: admin
          id: id
          user: user
          key: key
        - expires_at: 5
          updated_at: 6
          last_use_at: 1
          name: name
          created_at: 0
          description: description
          admin: admin
          id: id
          user: user
          key: key
        version: 7
        users:
        - used_download_data_transfer: 1
          gid: 1210617418
          max_sessions: 2
          download_data_transfer: 1
          description: description
          created_at: 4
          expiration_date: 1
          upload_data_transfer: 1
          public_keys:
          - ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEUWwDwEWhTbF0MqAsp/oXK1HR2cElhM8oo1uVmL3ZeDKDiTm4ljMr92wfTgIGDqIoxmVqgYIkAOAhuykAVWBzc=
            user@host
          - ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEUWwDwEWhTbF0MqAsp/oXK1HR2cElhM8oo1uVmL3ZeDKDiTm4ljMr92wfTgIGDqIoxmVqgYIkAOAhuykAVWBzc=
            user@host
          virtual_folders:
          - null
          - null
          uid: 1280358508
          used_quota_size: 3
          password: password
          last_quota_update: 4
          updated_at: 5
          permissions:
            /:
            - '*'
            /somedir:
            - list
            - download
          used_quota_files: 2
          id: 1
          email: email
          used_upload_data_transfer: 7
          last_login: 9
          home_dir: home_dir
          total_data_transfer: 6
          filters:
            denied_ip:
            - 172.16.0.0/16
            allowed_ip:
            - 192.0.2.0/24
            - 2001:db8::/32
            allow_api_key_auth: true
            denied_login_methods:
            - null
            - null
            web_client:
            - null
            - null
            data_transfer_limits:
            - sources:
              - sources
              - sources
              download_data_transfer: 3
              total_data_transfer: 6
              upload_data_transfer: 6
            - sources:
              - sources
              - sources
              download_data_transfer: 3
              total_data_transfer: 6
              upload_data_transfer: 6
            disable_fs_checks: false
            file_patterns:
            - path: path
              denied_patterns:
              - '*.zip'
              allowed_patterns:
              - '*.jpg'
              - a*b?.png
              deny_policy: 9
            - path: path
              denied_patterns:
              - '*.zip'
              allowed_patterns:
              - '*.jpg'
              - a*b?.png
              deny_policy: 9
            recovery_codes:
            - secret:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              used: true
            - secret:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              used: true
            max_upload_file_size: 6
            tls_username: None
            denied_protocols:
            - null
            - null
            hooks:
              external_auth_disabled: false
              pre_login_disabled: false
              check_password_disabled: false
            bandwidth_limits:
            - sources:
              - sources
              - sources
              upload_bandwidth: 8
              download_bandwidth: 9
            - sources:
              - sources
              - sources
              upload_bandwidth: 8
              download_bandwidth: 9
          filesystem:
            gcsconfig:
              bucket: bucket
              storage_class: storage_class
              credentials:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              automatic_credentials: 3
              key_prefix: folder/subfolder/
              acl: acl
            sftpconfig:
              endpoint: endpoint
              password:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              disable_concurrent_reads: true
              prefix: prefix
              buffer_size: 2
              private_key:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              username: username
              fingerprints:
              - fingerprints
              - fingerprints
            cryptconfig:
              passphrase:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
            azblobconfig:
              container: container
              sas_url:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              endpoint: endpoint
              upload_part_size: 3
              key_prefix: folder/subfolder/
              account_name: account_name
              account_key:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              access_tier: ""
              use_emulator: true
              upload_concurrency: 7
            s3config:
              upload_part_max_time: 6
              storage_class: storage_class
              force_path_style: true
              download_part_max_time: 6
              acl: acl
              download_concurrency: 5
              bucket: bucket
              endpoint: endpoint
              upload_part_size: 1
              key_prefix: folder/subfolder/
              access_key: access_key
              access_secret:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              download_part_size: 6
              region: region
              upload_concurrency: 2
          quota_files: 9
          download_bandwidth: 1
          quota_size: 7
          additional_info: additional_info
          upload_bandwidth: 7
          status: 6
          username: username
        - used_download_data_transfer: 1
          gid: 1210617418
          max_sessions: 2
          download_data_transfer: 1
          description: description
          created_at: 4
          expiration_date: 1
          upload_data_transfer: 1
          public_keys:
          - ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEUWwDwEWhTbF0MqAsp/oXK1HR2cElhM8oo1uVmL3ZeDKDiTm4ljMr92wfTgIGDqIoxmVqgYIkAOAhuykAVWBzc=
            user@host
          - ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEUWwDwEWhTbF0MqAsp/oXK1HR2cElhM8oo1uVmL3ZeDKDiTm4ljMr92wfTgIGDqIoxmVqgYIkAOAhuykAVWBzc=
            user@host
          virtual_folders:
          - null
          - null
          uid: 1280358508
          used_quota_size: 3
          password: password
          last_quota_update: 4
          updated_at: 5
          permissions:
            /:
            - '*'
            /somedir:
            - list
            - download
          used_quota_files: 2
          id: 1
          email: email
          used_upload_data_transfer: 7
          last_login: 9
          home_dir: home_dir
          total_data_transfer: 6
          filters:
            denied_ip:
            - 172.16.0.0/16
            allowed_ip:
            - 192.0.2.0/24
            - 2001:db8::/32
            allow_api_key_auth: true
            denied_login_methods:
            - null
            - null
            web_client:
            - null
            - null
            data_transfer_limits:
            - sources:
              - sources
              - sources
              download_data_transfer: 3
              total_data_transfer: 6
              upload_data_transfer: 6
            - sources:
              - sources
              - sources
              download_data_transfer: 3
              total_data_transfer: 6
              upload_data_transfer: 6
            disable_fs_checks: false
            file_patterns:
            - path: path
              denied_patterns:
              - '*.zip'
              allowed_patterns:
              - '*.jpg'
              - a*b?.png
              deny_policy: 9
            - path: path
              denied_patterns:
              - '*.zip'
              allowed_patterns:
              - '*.jpg'
              - a*b?.png
              deny_policy: 9
            recovery_codes:
            - secret:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              used: true
            - secret:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              used: true
            max_upload_file_size: 6
            tls_username: None
            denied_protocols:
            - null
            - null
            hooks:
              external_auth_disabled: false
              pre_login_disabled: false
              check_password_disabled: false
            bandwidth_limits:
            - sources:
              - sources
              - sources
              upload_bandwidth: 8
              download_bandwidth: 9
            - sources:
              - sources
              - sources
              upload_bandwidth: 8
              download_bandwidth: 9
          filesystem:
            gcsconfig:
              bucket: bucket
              storage_class: storage_class
              credentials:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              automatic_credentials: 3
              key_prefix: folder/subfolder/
              acl: acl
            sftpconfig:
              endpoint: endpoint
              password:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              disable_concurrent_reads: true
              prefix: prefix
              buffer_size: 2
              private_key:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              username: username
              fingerprints:
              - fingerprints
              - fingerprints
            cryptconfig:
              passphrase:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
            azblobconfig:
              container: container
              sas_url:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              endpoint: endpoint
              upload_part_size: 3
              key_prefix: folder/subfolder/
              account_name: account_name
              account_key:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              access_tier: ""
              use_emulator: true
              upload_concurrency: 7
            s3config:
              upload_part_max_time: 6
              storage_class: storage_class
              force_path_style: true
              download_part_max_time: 6
              acl: acl
              download_concurrency: 5
              bucket: bucket
              endpoint: endpoint
              upload_part_size: 1
              key_prefix: folder/subfolder/
              access_key: access_key
              access_secret:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              download_part_size: 6
              region: region
              upload_concurrency: 2
          quota_files: 9
          download_bandwidth: 1
          quota_size: 7
          additional_info: additional_info
          upload_bandwidth: 7
          status: 6
          username: username
        admins:
        - password: password
          updated_at: 5
          additional_info: additional_info
          permissions:
          - null
          - null
          last_login: 5
          description: description
          created_at: 1
          id: 1
          filters:
            allow_list:
            - 192.0.2.0/24
            - 2001:db8::/32
            recovery_codes:
            - secret:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              used: true
            - secret:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              used: true
            allow_api_key_auth: true
          email: email
          status: 6
          username: username
        - password: password
          updated_at: 5
          additional_info: additional_info
          permissions:
          - null
          - null
          last_login: 5
          description: description
          created_at: 1
          id: 1
          filters:
            allow_list:
            - 192.0.2.0/24
            - 2001:db8::/32
            recovery_codes:
            - secret:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              used: true
            - secret:
                mode: 0
                additional_data: additional_data
                payload: payload
                key: key
                status: Plain
              used: true
            allow_api_key_auth: true
          email: email
          status: 6
          username: username
      properties:
        users:
          items:
            $ref: '#/components/schemas/User'
          type: array
        folders:
          items:
            $ref: '#/components/schemas/BaseVirtualFolder'
          type: array
        admins:
          items:
            $ref: '#/components/schemas/Admin'
          type: array
        api_keys:
          items:
            $ref: '#/components/schemas/AuthAPIKey'
          type: array
        shares:
          items:
            $ref: '#/components/schemas/Share'
          type: array
        version:
          type: integer
      type: object
    PwdChange:
      example:
        new_password: new_password
        current_password: current_password
      properties:
        current_password:
          type: string
        new_password:
          type: string
      type: object
    DirEntry:
      example:
        mode: 6
        size: 0
        name: name
        last_modified: 2000-01-23T04:56:07.000+00:00
      properties:
        name:
          description: name of the file (or subdirectory) described by the entry.
            This name is the final element of the path (the base name), not the entire
            path
          type: string
        size:
          description: file size, omitted for folders and non regular files
          format: int64
          type: integer
        mode:
          description: |
            File mode and permission bits. More details here: https://golang.org/pkg/io/fs/#FileMode.
            Let's see some examples:
            - for a directory mode&2147483648 != 0
            - for a symlink mode&134217728 != 0
            - for a regular file mode&2401763328 == 0
          type: integer
        last_modified:
          format: date-time
          type: string
      type: object
    FsEvent:
      example:
        virtual_target_path: virtual_target_path
        fs_target_path: fs_target_path
        ip: ip
        session_id: session_id
        open_flags: open_flags
        file_size: 6
        bucket: bucket
        endpoint: endpoint
        ssh_cmd: ssh_cmd
        instance_id: instance_id
        id: id
        timestamp: 0
        username: username
        fs_path: fs_path
        virtual_path: virtual_path
      properties:
        id:
          type: string
        timestamp:
          description: unix timestamp in nanoseconds
          format: int64
          type: integer
        action:
          $ref: '#/components/schemas/FsEventAction'
        username:
          type: string
        fs_path:
          type: string
        fs_target_path:
          type: string
        virtual_path:
          type: string
        virtual_target_path:
          type: string
        ssh_cmd:
          type: string
        file_size:
          format: int64
          type: integer
        status:
          $ref: '#/components/schemas/FsEventStatus'
        protocol:
          $ref: '#/components/schemas/EventProtocols'
        ip:
          type: string
        session_id:
          type: string
        fs_provider:
          $ref: '#/components/schemas/FsProviders'
        bucket:
          type: string
        endpoint:
          type: string
        open_flags:
          type: string
        instance_id:
          type: string
      type: object
    ProviderEvent:
      example:
        instance_id: instance_id
        ip: ip
        object_name: object_name
        id: id
        timestamp: 0
        username: username
      properties:
        id:
          type: string
        timestamp:
          description: unix timestamp in nanoseconds
          format: int64
          type: integer
        action:
          $ref: '#/components/schemas/ProviderEventAction'
        username:
          type: string
        ip:
          type: string
        object_type:
          $ref: '#/components/schemas/ProviderEventObjectType'
        object_name:
          type: string
        instance_id:
          type: string
      type: object
    ApiResponse:
      example:
        message: message
        error: error
      properties:
        message:
          description: message, can be empty
          type: string
        error:
          description: error description if any
          type: string
      type: object
    VersionInfo:
      example:
        build_date: build_date
        features:
        - features
        - features
        version: version
        commit_hash: commit_hash
      properties:
        version:
          type: string
        build_date:
          type: string
        commit_hash:
          type: string
        features:
          description: Features for the current build. Available features are "portable",
            "bolt", "mysql", "sqlite", "pgsql", "s3", "gcs", "metrics". If a feature
            is available it has a "+" prefix, otherwise a "-" prefix
          items:
            type: string
          type: array
      type: object
    Token:
      example:
        access_token: access_token
        expires_at: 2000-01-23T04:56:07.000+00:00
      properties:
        access_token:
          type: string
        expires_at:
          format: date-time
          type: string
      type: object
    inline_object:
      properties:
        filenames:
          items:
            format: binary
            type: string
          minItems: 1
          type: array
          uniqueItems: true
      type: object
    inline_object_1:
      properties:
        config_name:
          description: name of the configuration to use to generate the secret
          type: string
      type: object
    inline_response_200:
      example:
        config_name: config_name
        qr_code: qr_code
        secret: secret
        issuer: issuer
      properties:
        config_name:
          type: string
        issuer:
          type: string
        secret:
          type: string
        qr_code:
          description: QR code png encoded as BASE64
          format: byte
          type: string
      type: object
    inline_object_2:
      properties:
        config_name:
          description: name of the configuration to use to validate the passcode
          type: string
        passcode:
          description: passcode to validate
          type: string
        secret:
          description: secret to use to validate the passcode
          type: string
      type: object
    inline_object_3:
      properties:
        ip:
          description: IPv4/IPv6 address to remove
          type: string
      type: object
    inline_response_201:
      example:
        mesage: API key created. This is the only time the API key is visible, please
          save it.
        key: key
      properties:
        mesage:
          example: API key created. This is the only time the API key is visible,
            please save it.
          type: string
        key:
          description: generated API key
          type: string
      type: object
    inline_object_4:
      properties:
        code:
          type: string
        password:
          type: string
      type: object
    inline_object_5:
      properties:
        code:
          type: string
        password:
          type: string
      type: object
    inline_object_6:
      properties:
        config_name:
          description: name of the configuration to use to generate the secret
          type: string
      type: object
    inline_object_7:
      properties:
        config_name:
          description: name of the configuration to use to validate the passcode
          type: string
        passcode:
          description: passcode to validate
          type: string
        secret:
          description: secret to use to validate the passcode
          type: string
      type: object
    inline_object_8:
      properties:
        filenames:
          items:
            format: binary
            type: string
          minItems: 1
          type: array
          uniqueItems: true
      type: object
    inline_object_9:
      properties:
        modification_time:
          description: File modification time as unix timestamp in milliseconds
          type: integer
      type: object
    UserTOTPConfig_allOf:
      properties:
        protocols:
          description: TOTP will be required for the specified protocols. SSH protocol
            (SFTP/SCP/SSH commands) will ask for the TOTP passcode if the client uses
            keyboard interactive authentication. FTP has no standard way to support
            two factor authentication, if you enable the FTP support, you have to
            add the TOTP passcode after the password. For example if your password
            is "password" and your one time passcode is "123456" you have to use "password123456"
            as password. WebDAV is not supported since each single request must be
            authenticated and a passcode cannot be reused.
          items:
            $ref: '#/components/schemas/MFAProtocols'
          type: array
      type: object
    VirtualFolder_allOf:
      properties:
        virtual_path:
          type: string
        quota_size:
          description: Quota as size in bytes. 0 menas unlimited, -1 means included
            in user quota. Please note that quota is updated if files are added/removed
            via SFTPGo otherwise a quota scan or a manual quota update is needed
          format: int64
          type: integer
        quota_files:
          description: Quota as number of files. 0 menas unlimited, , -1 means included
            in user quota. Please note that quota is updated if files are added/removed
            via SFTPGo otherwise a quota scan or a manual quota update is needed
          format: int32
          type: integer
      required:
      - virtual_path
      type: object
    ServicesStatus_defender:
      example:
        is_active: true
      properties:
        is_active:
          type: boolean
      type: object
  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
    APIKeyAuth:
      description: API key to use for authentication. API key authentication is intrinsically
        less secure than using a short lived JWT token. You should prefer API key
        authentication only for machine-to-machine communications in trusted environments.
        If no admin/user is associated to the provided key you need to add ".username"
        at the end of the key. For example if your API key is "6ajKLwswLccVBGpZGv596G.ySAXc8vtp9hMiwAuaLtzof"
        and you want to impersonate the admin with username "myadmin" you have to
        use "6ajKLwswLccVBGpZGv596G.ySAXc8vtp9hMiwAuaLtzof.myadmin" as API key. When
        using API key authentication you cannot manage API keys, update the impersonated
        admin, change password or public keys for the impersonated user.
      in: header
      name: X-SFTPGO-API-KEY
      type: apiKey
