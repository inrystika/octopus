/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SSHBinding struct for SSHBinding
type SSHBinding struct {
	// TCP address the server listen on
	Address *string `json:"address,omitempty"`
	// the port used for serving requests
	Port *int32 `json:"port,omitempty"`
	// apply the proxy configuration, if any
	ApplyProxyConfig *bool `json:"apply_proxy_config,omitempty"`
}

// NewSSHBinding instantiates a new SSHBinding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSSHBinding() *SSHBinding {
	this := SSHBinding{}
	return &this
}

// NewSSHBindingWithDefaults instantiates a new SSHBinding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSSHBindingWithDefaults() *SSHBinding {
	this := SSHBinding{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *SSHBinding) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSHBinding) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *SSHBinding) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *SSHBinding) SetAddress(v string) {
	o.Address = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *SSHBinding) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSHBinding) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *SSHBinding) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *SSHBinding) SetPort(v int32) {
	o.Port = &v
}

// GetApplyProxyConfig returns the ApplyProxyConfig field value if set, zero value otherwise.
func (o *SSHBinding) GetApplyProxyConfig() bool {
	if o == nil || o.ApplyProxyConfig == nil {
		var ret bool
		return ret
	}
	return *o.ApplyProxyConfig
}

// GetApplyProxyConfigOk returns a tuple with the ApplyProxyConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSHBinding) GetApplyProxyConfigOk() (*bool, bool) {
	if o == nil || o.ApplyProxyConfig == nil {
		return nil, false
	}
	return o.ApplyProxyConfig, true
}

// HasApplyProxyConfig returns a boolean if a field has been set.
func (o *SSHBinding) HasApplyProxyConfig() bool {
	if o != nil && o.ApplyProxyConfig != nil {
		return true
	}

	return false
}

// SetApplyProxyConfig gets a reference to the given bool and assigns it to the ApplyProxyConfig field.
func (o *SSHBinding) SetApplyProxyConfig(v bool) {
	o.ApplyProxyConfig = &v
}

func (o SSHBinding) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.ApplyProxyConfig != nil {
		toSerialize["apply_proxy_config"] = o.ApplyProxyConfig
	}
	return json.Marshal(toSerialize)
}

type NullableSSHBinding struct {
	value *SSHBinding
	isSet bool
}

func (v NullableSSHBinding) Get() *SSHBinding {
	return v.value
}

func (v *NullableSSHBinding) Set(val *SSHBinding) {
	v.value = val
	v.isSet = true
}

func (v NullableSSHBinding) IsSet() bool {
	return v.isSet
}

func (v *NullableSSHBinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSSHBinding(val *SSHBinding) *NullableSSHBinding {
	return &NullableSSHBinding{value: val, isSet: true}
}

func (v NullableSSHBinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSSHBinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


