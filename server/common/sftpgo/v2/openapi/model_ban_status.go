/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// BanStatus struct for BanStatus
type BanStatus struct {
	// if null the host is not banned
	DateTime NullableTime `json:"date_time,omitempty"`
}

// NewBanStatus instantiates a new BanStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBanStatus() *BanStatus {
	this := BanStatus{}
	return &this
}

// NewBanStatusWithDefaults instantiates a new BanStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBanStatusWithDefaults() *BanStatus {
	this := BanStatus{}
	return &this
}

// GetDateTime returns the DateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BanStatus) GetDateTime() time.Time {
	if o == nil || o.DateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.DateTime.Get()
}

// GetDateTimeOk returns a tuple with the DateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BanStatus) GetDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DateTime.Get(), o.DateTime.IsSet()
}

// HasDateTime returns a boolean if a field has been set.
func (o *BanStatus) HasDateTime() bool {
	if o != nil && o.DateTime.IsSet() {
		return true
	}

	return false
}

// SetDateTime gets a reference to the given NullableTime and assigns it to the DateTime field.
func (o *BanStatus) SetDateTime(v time.Time) {
	o.DateTime.Set(&v)
}
// SetDateTimeNil sets the value for DateTime to be an explicit nil
func (o *BanStatus) SetDateTimeNil() {
	o.DateTime.Set(nil)
}

// UnsetDateTime ensures that no value is present for DateTime, not even an explicit nil
func (o *BanStatus) UnsetDateTime() {
	o.DateTime.Unset()
}

func (o BanStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DateTime.IsSet() {
		toSerialize["date_time"] = o.DateTime.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBanStatus struct {
	value *BanStatus
	isSet bool
}

func (v NullableBanStatus) Get() *BanStatus {
	return v.value
}

func (v *NullableBanStatus) Set(val *BanStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBanStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBanStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBanStatus(val *BanStatus) *NullableBanStatus {
	return &NullableBanStatus{value: val, isSet: true}
}

func (v NullableBanStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBanStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


