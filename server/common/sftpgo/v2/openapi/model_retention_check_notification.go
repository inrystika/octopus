/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// RetentionCheckNotification Options:   * `Hook` - notify result using the defined hook. A \"data_retention_hook\" must be defined in your configuration file for this to work   * `Email` - notify results by email. The admin starting the retention check must have an associated email address and the SMTP server must be configured for this to work 
type RetentionCheckNotification string

// List of RetentionCheckNotification
const (
	RETENTIONCHECKNOTIFICATION_HOOK RetentionCheckNotification = "Hook"
	RETENTIONCHECKNOTIFICATION_EMAIL RetentionCheckNotification = "Email"
)

// All allowed values of RetentionCheckNotification enum
var AllowedRetentionCheckNotificationEnumValues = []RetentionCheckNotification{
	"Hook",
	"Email",
}

func (v *RetentionCheckNotification) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RetentionCheckNotification(value)
	for _, existing := range AllowedRetentionCheckNotificationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RetentionCheckNotification", value)
}

// NewRetentionCheckNotificationFromValue returns a pointer to a valid RetentionCheckNotification
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRetentionCheckNotificationFromValue(v string) (*RetentionCheckNotification, error) {
	ev := RetentionCheckNotification(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RetentionCheckNotification: valid values are %v", v, AllowedRetentionCheckNotificationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RetentionCheckNotification) IsValid() bool {
	for _, existing := range AllowedRetentionCheckNotificationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RetentionCheckNotification value
func (v RetentionCheckNotification) Ptr() *RetentionCheckNotification {
	return &v
}

type NullableRetentionCheckNotification struct {
	value *RetentionCheckNotification
	isSet bool
}

func (v NullableRetentionCheckNotification) Get() *RetentionCheckNotification {
	return v.value
}

func (v *NullableRetentionCheckNotification) Set(val *RetentionCheckNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableRetentionCheckNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableRetentionCheckNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetentionCheckNotification(val *RetentionCheckNotification) *NullableRetentionCheckNotification {
	return &NullableRetentionCheckNotification{value: val, isSet: true}
}

func (v NullableRetentionCheckNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetentionCheckNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

