/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// VirtualFolderAllOf struct for VirtualFolderAllOf
type VirtualFolderAllOf struct {
	VirtualPath string `json:"virtual_path"`
	// Quota as size in bytes. 0 menas unlimited, -1 means included in user quota. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed
	QuotaSize *int64 `json:"quota_size,omitempty"`
	// Quota as number of files. 0 menas unlimited, , -1 means included in user quota. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed
	QuotaFiles *int32 `json:"quota_files,omitempty"`
}

// NewVirtualFolderAllOf instantiates a new VirtualFolderAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualFolderAllOf(virtualPath string) *VirtualFolderAllOf {
	this := VirtualFolderAllOf{}
	this.VirtualPath = virtualPath
	return &this
}

// NewVirtualFolderAllOfWithDefaults instantiates a new VirtualFolderAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualFolderAllOfWithDefaults() *VirtualFolderAllOf {
	this := VirtualFolderAllOf{}
	return &this
}

// GetVirtualPath returns the VirtualPath field value
func (o *VirtualFolderAllOf) GetVirtualPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VirtualPath
}

// GetVirtualPathOk returns a tuple with the VirtualPath field value
// and a boolean to check if the value has been set.
func (o *VirtualFolderAllOf) GetVirtualPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VirtualPath, true
}

// SetVirtualPath sets field value
func (o *VirtualFolderAllOf) SetVirtualPath(v string) {
	o.VirtualPath = v
}

// GetQuotaSize returns the QuotaSize field value if set, zero value otherwise.
func (o *VirtualFolderAllOf) GetQuotaSize() int64 {
	if o == nil || o.QuotaSize == nil {
		var ret int64
		return ret
	}
	return *o.QuotaSize
}

// GetQuotaSizeOk returns a tuple with the QuotaSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualFolderAllOf) GetQuotaSizeOk() (*int64, bool) {
	if o == nil || o.QuotaSize == nil {
		return nil, false
	}
	return o.QuotaSize, true
}

// HasQuotaSize returns a boolean if a field has been set.
func (o *VirtualFolderAllOf) HasQuotaSize() bool {
	if o != nil && o.QuotaSize != nil {
		return true
	}

	return false
}

// SetQuotaSize gets a reference to the given int64 and assigns it to the QuotaSize field.
func (o *VirtualFolderAllOf) SetQuotaSize(v int64) {
	o.QuotaSize = &v
}

// GetQuotaFiles returns the QuotaFiles field value if set, zero value otherwise.
func (o *VirtualFolderAllOf) GetQuotaFiles() int32 {
	if o == nil || o.QuotaFiles == nil {
		var ret int32
		return ret
	}
	return *o.QuotaFiles
}

// GetQuotaFilesOk returns a tuple with the QuotaFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualFolderAllOf) GetQuotaFilesOk() (*int32, bool) {
	if o == nil || o.QuotaFiles == nil {
		return nil, false
	}
	return o.QuotaFiles, true
}

// HasQuotaFiles returns a boolean if a field has been set.
func (o *VirtualFolderAllOf) HasQuotaFiles() bool {
	if o != nil && o.QuotaFiles != nil {
		return true
	}

	return false
}

// SetQuotaFiles gets a reference to the given int32 and assigns it to the QuotaFiles field.
func (o *VirtualFolderAllOf) SetQuotaFiles(v int32) {
	o.QuotaFiles = &v
}

func (o VirtualFolderAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["virtual_path"] = o.VirtualPath
	}
	if o.QuotaSize != nil {
		toSerialize["quota_size"] = o.QuotaSize
	}
	if o.QuotaFiles != nil {
		toSerialize["quota_files"] = o.QuotaFiles
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualFolderAllOf struct {
	value *VirtualFolderAllOf
	isSet bool
}

func (v NullableVirtualFolderAllOf) Get() *VirtualFolderAllOf {
	return v.value
}

func (v *NullableVirtualFolderAllOf) Set(val *VirtualFolderAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualFolderAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualFolderAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualFolderAllOf(val *VirtualFolderAllOf) *NullableVirtualFolderAllOf {
	return &NullableVirtualFolderAllOf{value: val, isSet: true}
}

func (v NullableVirtualFolderAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualFolderAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


