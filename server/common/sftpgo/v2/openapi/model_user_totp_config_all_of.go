/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// UserTOTPConfigAllOf struct for UserTOTPConfigAllOf
type UserTOTPConfigAllOf struct {
	// TOTP will be required for the specified protocols. SSH protocol (SFTP/SCP/SSH commands) will ask for the TOTP passcode if the client uses keyboard interactive authentication. FTP has no standard way to support two factor authentication, if you enable the FTP support, you have to add the TOTP passcode after the password. For example if your password is \"password\" and your one time passcode is \"123456\" you have to use \"password123456\" as password. WebDAV is not supported since each single request must be authenticated and a passcode cannot be reused.
	Protocols []MFAProtocols `json:"protocols,omitempty"`
}

// NewUserTOTPConfigAllOf instantiates a new UserTOTPConfigAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserTOTPConfigAllOf() *UserTOTPConfigAllOf {
	this := UserTOTPConfigAllOf{}
	return &this
}

// NewUserTOTPConfigAllOfWithDefaults instantiates a new UserTOTPConfigAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserTOTPConfigAllOfWithDefaults() *UserTOTPConfigAllOf {
	this := UserTOTPConfigAllOf{}
	return &this
}

// GetProtocols returns the Protocols field value if set, zero value otherwise.
func (o *UserTOTPConfigAllOf) GetProtocols() []MFAProtocols {
	if o == nil || o.Protocols == nil {
		var ret []MFAProtocols
		return ret
	}
	return o.Protocols
}

// GetProtocolsOk returns a tuple with the Protocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTOTPConfigAllOf) GetProtocolsOk() ([]MFAProtocols, bool) {
	if o == nil || o.Protocols == nil {
		return nil, false
	}
	return o.Protocols, true
}

// HasProtocols returns a boolean if a field has been set.
func (o *UserTOTPConfigAllOf) HasProtocols() bool {
	if o != nil && o.Protocols != nil {
		return true
	}

	return false
}

// SetProtocols gets a reference to the given []MFAProtocols and assigns it to the Protocols field.
func (o *UserTOTPConfigAllOf) SetProtocols(v []MFAProtocols) {
	o.Protocols = v
}

func (o UserTOTPConfigAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Protocols != nil {
		toSerialize["protocols"] = o.Protocols
	}
	return json.Marshal(toSerialize)
}

type NullableUserTOTPConfigAllOf struct {
	value *UserTOTPConfigAllOf
	isSet bool
}

func (v NullableUserTOTPConfigAllOf) Get() *UserTOTPConfigAllOf {
	return v.value
}

func (v *NullableUserTOTPConfigAllOf) Set(val *UserTOTPConfigAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUserTOTPConfigAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUserTOTPConfigAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserTOTPConfigAllOf(val *UserTOTPConfigAllOf) *NullableUserTOTPConfigAllOf {
	return &NullableUserTOTPConfigAllOf{value: val, isSet: true}
}

func (v NullableUserTOTPConfigAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserTOTPConfigAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


