/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AdminFilters struct for AdminFilters
type AdminFilters struct {
	// only clients connecting from these IP/Mask are allowed. IP/Mask must be in CIDR notation as defined in RFC 4632 and RFC 4291, for example \"192.0.2.0/24\" or \"2001:db8::/32\"
	AllowList []string `json:"allow_list,omitempty"`
	// API key auth allows to impersonate this administrator with an API key
	AllowApiKeyAuth *bool `json:"allow_api_key_auth,omitempty"`
	TotpConfig *AdminTOTPConfig `json:"totp_config,omitempty"`
	RecoveryCodes []RecoveryCode `json:"recovery_codes,omitempty"`
}

// NewAdminFilters instantiates a new AdminFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminFilters() *AdminFilters {
	this := AdminFilters{}
	return &this
}

// NewAdminFiltersWithDefaults instantiates a new AdminFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminFiltersWithDefaults() *AdminFilters {
	this := AdminFilters{}
	return &this
}

// GetAllowList returns the AllowList field value if set, zero value otherwise.
func (o *AdminFilters) GetAllowList() []string {
	if o == nil || o.AllowList == nil {
		var ret []string
		return ret
	}
	return o.AllowList
}

// GetAllowListOk returns a tuple with the AllowList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminFilters) GetAllowListOk() ([]string, bool) {
	if o == nil || o.AllowList == nil {
		return nil, false
	}
	return o.AllowList, true
}

// HasAllowList returns a boolean if a field has been set.
func (o *AdminFilters) HasAllowList() bool {
	if o != nil && o.AllowList != nil {
		return true
	}

	return false
}

// SetAllowList gets a reference to the given []string and assigns it to the AllowList field.
func (o *AdminFilters) SetAllowList(v []string) {
	o.AllowList = v
}

// GetAllowApiKeyAuth returns the AllowApiKeyAuth field value if set, zero value otherwise.
func (o *AdminFilters) GetAllowApiKeyAuth() bool {
	if o == nil || o.AllowApiKeyAuth == nil {
		var ret bool
		return ret
	}
	return *o.AllowApiKeyAuth
}

// GetAllowApiKeyAuthOk returns a tuple with the AllowApiKeyAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminFilters) GetAllowApiKeyAuthOk() (*bool, bool) {
	if o == nil || o.AllowApiKeyAuth == nil {
		return nil, false
	}
	return o.AllowApiKeyAuth, true
}

// HasAllowApiKeyAuth returns a boolean if a field has been set.
func (o *AdminFilters) HasAllowApiKeyAuth() bool {
	if o != nil && o.AllowApiKeyAuth != nil {
		return true
	}

	return false
}

// SetAllowApiKeyAuth gets a reference to the given bool and assigns it to the AllowApiKeyAuth field.
func (o *AdminFilters) SetAllowApiKeyAuth(v bool) {
	o.AllowApiKeyAuth = &v
}

// GetTotpConfig returns the TotpConfig field value if set, zero value otherwise.
func (o *AdminFilters) GetTotpConfig() AdminTOTPConfig {
	if o == nil || o.TotpConfig == nil {
		var ret AdminTOTPConfig
		return ret
	}
	return *o.TotpConfig
}

// GetTotpConfigOk returns a tuple with the TotpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminFilters) GetTotpConfigOk() (*AdminTOTPConfig, bool) {
	if o == nil || o.TotpConfig == nil {
		return nil, false
	}
	return o.TotpConfig, true
}

// HasTotpConfig returns a boolean if a field has been set.
func (o *AdminFilters) HasTotpConfig() bool {
	if o != nil && o.TotpConfig != nil {
		return true
	}

	return false
}

// SetTotpConfig gets a reference to the given AdminTOTPConfig and assigns it to the TotpConfig field.
func (o *AdminFilters) SetTotpConfig(v AdminTOTPConfig) {
	o.TotpConfig = &v
}

// GetRecoveryCodes returns the RecoveryCodes field value if set, zero value otherwise.
func (o *AdminFilters) GetRecoveryCodes() []RecoveryCode {
	if o == nil || o.RecoveryCodes == nil {
		var ret []RecoveryCode
		return ret
	}
	return o.RecoveryCodes
}

// GetRecoveryCodesOk returns a tuple with the RecoveryCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminFilters) GetRecoveryCodesOk() ([]RecoveryCode, bool) {
	if o == nil || o.RecoveryCodes == nil {
		return nil, false
	}
	return o.RecoveryCodes, true
}

// HasRecoveryCodes returns a boolean if a field has been set.
func (o *AdminFilters) HasRecoveryCodes() bool {
	if o != nil && o.RecoveryCodes != nil {
		return true
	}

	return false
}

// SetRecoveryCodes gets a reference to the given []RecoveryCode and assigns it to the RecoveryCodes field.
func (o *AdminFilters) SetRecoveryCodes(v []RecoveryCode) {
	o.RecoveryCodes = v
}

func (o AdminFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowList != nil {
		toSerialize["allow_list"] = o.AllowList
	}
	if o.AllowApiKeyAuth != nil {
		toSerialize["allow_api_key_auth"] = o.AllowApiKeyAuth
	}
	if o.TotpConfig != nil {
		toSerialize["totp_config"] = o.TotpConfig
	}
	if o.RecoveryCodes != nil {
		toSerialize["recovery_codes"] = o.RecoveryCodes
	}
	return json.Marshal(toSerialize)
}

type NullableAdminFilters struct {
	value *AdminFilters
	isSet bool
}

func (v NullableAdminFilters) Get() *AdminFilters {
	return v.value
}

func (v *NullableAdminFilters) Set(val *AdminFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminFilters(val *AdminFilters) *NullableAdminFilters {
	return &NullableAdminFilters{value: val, isSet: true}
}

func (v NullableAdminFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


