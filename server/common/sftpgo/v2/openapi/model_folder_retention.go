/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// FolderRetention struct for FolderRetention
type FolderRetention struct {
	// exposed virtual directory path, if no other specific retention is defined, the retention applies for sub directories too. For example if retention is defined for the paths \"/\" and \"/sub\" then the retention for \"/\" is applied for any file outside the \"/sub\" directory
	Path *string `json:"path,omitempty"`
	// retention time in hours. All the files with a modification time older than the defined value will be deleted. 0 means exclude this path
	Retention *int32 `json:"retention,omitempty"`
	// if enabled, empty directories will be deleted
	DeleteEmptyDirs *bool `json:"delete_empty_dirs,omitempty"`
	// if enabled, files will be deleted even if the user does not have the delete permission. The default is \"false\" which means that files will be skipped if the user does not have permission to delete them. File patterns filters will always be silently ignored
	IgnoreUserPermissions *bool `json:"ignore_user_permissions,omitempty"`
}

// NewFolderRetention instantiates a new FolderRetention object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolderRetention() *FolderRetention {
	this := FolderRetention{}
	return &this
}

// NewFolderRetentionWithDefaults instantiates a new FolderRetention object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolderRetentionWithDefaults() *FolderRetention {
	this := FolderRetention{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *FolderRetention) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderRetention) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *FolderRetention) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *FolderRetention) SetPath(v string) {
	o.Path = &v
}

// GetRetention returns the Retention field value if set, zero value otherwise.
func (o *FolderRetention) GetRetention() int32 {
	if o == nil || o.Retention == nil {
		var ret int32
		return ret
	}
	return *o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderRetention) GetRetentionOk() (*int32, bool) {
	if o == nil || o.Retention == nil {
		return nil, false
	}
	return o.Retention, true
}

// HasRetention returns a boolean if a field has been set.
func (o *FolderRetention) HasRetention() bool {
	if o != nil && o.Retention != nil {
		return true
	}

	return false
}

// SetRetention gets a reference to the given int32 and assigns it to the Retention field.
func (o *FolderRetention) SetRetention(v int32) {
	o.Retention = &v
}

// GetDeleteEmptyDirs returns the DeleteEmptyDirs field value if set, zero value otherwise.
func (o *FolderRetention) GetDeleteEmptyDirs() bool {
	if o == nil || o.DeleteEmptyDirs == nil {
		var ret bool
		return ret
	}
	return *o.DeleteEmptyDirs
}

// GetDeleteEmptyDirsOk returns a tuple with the DeleteEmptyDirs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderRetention) GetDeleteEmptyDirsOk() (*bool, bool) {
	if o == nil || o.DeleteEmptyDirs == nil {
		return nil, false
	}
	return o.DeleteEmptyDirs, true
}

// HasDeleteEmptyDirs returns a boolean if a field has been set.
func (o *FolderRetention) HasDeleteEmptyDirs() bool {
	if o != nil && o.DeleteEmptyDirs != nil {
		return true
	}

	return false
}

// SetDeleteEmptyDirs gets a reference to the given bool and assigns it to the DeleteEmptyDirs field.
func (o *FolderRetention) SetDeleteEmptyDirs(v bool) {
	o.DeleteEmptyDirs = &v
}

// GetIgnoreUserPermissions returns the IgnoreUserPermissions field value if set, zero value otherwise.
func (o *FolderRetention) GetIgnoreUserPermissions() bool {
	if o == nil || o.IgnoreUserPermissions == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreUserPermissions
}

// GetIgnoreUserPermissionsOk returns a tuple with the IgnoreUserPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderRetention) GetIgnoreUserPermissionsOk() (*bool, bool) {
	if o == nil || o.IgnoreUserPermissions == nil {
		return nil, false
	}
	return o.IgnoreUserPermissions, true
}

// HasIgnoreUserPermissions returns a boolean if a field has been set.
func (o *FolderRetention) HasIgnoreUserPermissions() bool {
	if o != nil && o.IgnoreUserPermissions != nil {
		return true
	}

	return false
}

// SetIgnoreUserPermissions gets a reference to the given bool and assigns it to the IgnoreUserPermissions field.
func (o *FolderRetention) SetIgnoreUserPermissions(v bool) {
	o.IgnoreUserPermissions = &v
}

func (o FolderRetention) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.Retention != nil {
		toSerialize["retention"] = o.Retention
	}
	if o.DeleteEmptyDirs != nil {
		toSerialize["delete_empty_dirs"] = o.DeleteEmptyDirs
	}
	if o.IgnoreUserPermissions != nil {
		toSerialize["ignore_user_permissions"] = o.IgnoreUserPermissions
	}
	return json.Marshal(toSerialize)
}

type NullableFolderRetention struct {
	value *FolderRetention
	isSet bool
}

func (v NullableFolderRetention) Get() *FolderRetention {
	return v.value
}

func (v *NullableFolderRetention) Set(val *FolderRetention) {
	v.value = val
	v.isSet = true
}

func (v NullableFolderRetention) IsSet() bool {
	return v.isSet
}

func (v *NullableFolderRetention) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolderRetention(val *FolderRetention) *NullableFolderRetention {
	return &NullableFolderRetention{value: val, isSet: true}
}

func (v NullableFolderRetention) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolderRetention) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


