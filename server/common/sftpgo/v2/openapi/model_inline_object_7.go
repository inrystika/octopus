/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineObject7 struct for InlineObject7
type InlineObject7 struct {
	// name of the configuration to use to validate the passcode
	ConfigName *string `json:"config_name,omitempty"`
	// passcode to validate
	Passcode *string `json:"passcode,omitempty"`
	// secret to use to validate the passcode
	Secret *string `json:"secret,omitempty"`
}

// NewInlineObject7 instantiates a new InlineObject7 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject7() *InlineObject7 {
	this := InlineObject7{}
	return &this
}

// NewInlineObject7WithDefaults instantiates a new InlineObject7 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject7WithDefaults() *InlineObject7 {
	this := InlineObject7{}
	return &this
}

// GetConfigName returns the ConfigName field value if set, zero value otherwise.
func (o *InlineObject7) GetConfigName() string {
	if o == nil || o.ConfigName == nil {
		var ret string
		return ret
	}
	return *o.ConfigName
}

// GetConfigNameOk returns a tuple with the ConfigName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject7) GetConfigNameOk() (*string, bool) {
	if o == nil || o.ConfigName == nil {
		return nil, false
	}
	return o.ConfigName, true
}

// HasConfigName returns a boolean if a field has been set.
func (o *InlineObject7) HasConfigName() bool {
	if o != nil && o.ConfigName != nil {
		return true
	}

	return false
}

// SetConfigName gets a reference to the given string and assigns it to the ConfigName field.
func (o *InlineObject7) SetConfigName(v string) {
	o.ConfigName = &v
}

// GetPasscode returns the Passcode field value if set, zero value otherwise.
func (o *InlineObject7) GetPasscode() string {
	if o == nil || o.Passcode == nil {
		var ret string
		return ret
	}
	return *o.Passcode
}

// GetPasscodeOk returns a tuple with the Passcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject7) GetPasscodeOk() (*string, bool) {
	if o == nil || o.Passcode == nil {
		return nil, false
	}
	return o.Passcode, true
}

// HasPasscode returns a boolean if a field has been set.
func (o *InlineObject7) HasPasscode() bool {
	if o != nil && o.Passcode != nil {
		return true
	}

	return false
}

// SetPasscode gets a reference to the given string and assigns it to the Passcode field.
func (o *InlineObject7) SetPasscode(v string) {
	o.Passcode = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *InlineObject7) GetSecret() string {
	if o == nil || o.Secret == nil {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject7) GetSecretOk() (*string, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *InlineObject7) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *InlineObject7) SetSecret(v string) {
	o.Secret = &v
}

func (o InlineObject7) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConfigName != nil {
		toSerialize["config_name"] = o.ConfigName
	}
	if o.Passcode != nil {
		toSerialize["passcode"] = o.Passcode
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject7 struct {
	value *InlineObject7
	isSet bool
}

func (v NullableInlineObject7) Get() *InlineObject7 {
	return v.value
}

func (v *NullableInlineObject7) Set(val *InlineObject7) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject7) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject7) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject7(val *InlineObject7) *NullableInlineObject7 {
	return &NullableInlineObject7{value: val, isSet: true}
}

func (v NullableInlineObject7) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject7) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


