/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// AuthAPIKeyScope Options:   * `1` - admin scope. The API key will be used to impersonate an SFTPGo admin   * `2` - user scope. The API key will be used to impersonate an SFTPGo user 
type AuthAPIKeyScope int32

// List of AuthAPIKeyScope
const (
	AUTHAPIKEYSCOPE__1 AuthAPIKeyScope = 1
	AUTHAPIKEYSCOPE__2 AuthAPIKeyScope = 2
)

// All allowed values of AuthAPIKeyScope enum
var AllowedAuthAPIKeyScopeEnumValues = []AuthAPIKeyScope{
	1,
	2,
}

func (v *AuthAPIKeyScope) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthAPIKeyScope(value)
	for _, existing := range AllowedAuthAPIKeyScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthAPIKeyScope", value)
}

// NewAuthAPIKeyScopeFromValue returns a pointer to a valid AuthAPIKeyScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthAPIKeyScopeFromValue(v int32) (*AuthAPIKeyScope, error) {
	ev := AuthAPIKeyScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthAPIKeyScope: valid values are %v", v, AllowedAuthAPIKeyScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthAPIKeyScope) IsValid() bool {
	for _, existing := range AllowedAuthAPIKeyScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthAPIKeyScope value
func (v AuthAPIKeyScope) Ptr() *AuthAPIKeyScope {
	return &v
}

type NullableAuthAPIKeyScope struct {
	value *AuthAPIKeyScope
	isSet bool
}

func (v NullableAuthAPIKeyScope) Get() *AuthAPIKeyScope {
	return v.value
}

func (v *NullableAuthAPIKeyScope) Set(val *AuthAPIKeyScope) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthAPIKeyScope) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthAPIKeyScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthAPIKeyScope(val *AuthAPIKeyScope) *NullableAuthAPIKeyScope {
	return &NullableAuthAPIKeyScope{value: val, isSet: true}
}

func (v NullableAuthAPIKeyScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthAPIKeyScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

