/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AdminProfile struct for AdminProfile
type AdminProfile struct {
	Email *string `json:"email,omitempty"`
	Description *string `json:"description,omitempty"`
	// If enabled, you can impersonate this admin, in REST API, using an API key. If disabled admin credentials are required for impersonation
	AllowApiKeyAuth *bool `json:"allow_api_key_auth,omitempty"`
}

// NewAdminProfile instantiates a new AdminProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminProfile() *AdminProfile {
	this := AdminProfile{}
	return &this
}

// NewAdminProfileWithDefaults instantiates a new AdminProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminProfileWithDefaults() *AdminProfile {
	this := AdminProfile{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *AdminProfile) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminProfile) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *AdminProfile) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *AdminProfile) SetEmail(v string) {
	o.Email = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AdminProfile) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminProfile) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AdminProfile) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AdminProfile) SetDescription(v string) {
	o.Description = &v
}

// GetAllowApiKeyAuth returns the AllowApiKeyAuth field value if set, zero value otherwise.
func (o *AdminProfile) GetAllowApiKeyAuth() bool {
	if o == nil || o.AllowApiKeyAuth == nil {
		var ret bool
		return ret
	}
	return *o.AllowApiKeyAuth
}

// GetAllowApiKeyAuthOk returns a tuple with the AllowApiKeyAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminProfile) GetAllowApiKeyAuthOk() (*bool, bool) {
	if o == nil || o.AllowApiKeyAuth == nil {
		return nil, false
	}
	return o.AllowApiKeyAuth, true
}

// HasAllowApiKeyAuth returns a boolean if a field has been set.
func (o *AdminProfile) HasAllowApiKeyAuth() bool {
	if o != nil && o.AllowApiKeyAuth != nil {
		return true
	}

	return false
}

// SetAllowApiKeyAuth gets a reference to the given bool and assigns it to the AllowApiKeyAuth field.
func (o *AdminProfile) SetAllowApiKeyAuth(v bool) {
	o.AllowApiKeyAuth = &v
}

func (o AdminProfile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.AllowApiKeyAuth != nil {
		toSerialize["allow_api_key_auth"] = o.AllowApiKeyAuth
	}
	return json.Marshal(toSerialize)
}

type NullableAdminProfile struct {
	value *AdminProfile
	isSet bool
}

func (v NullableAdminProfile) Get() *AdminProfile {
	return v.value
}

func (v *NullableAdminProfile) Set(val *AdminProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminProfile(val *AdminProfile) *NullableAdminProfile {
	return &NullableAdminProfile{value: val, isSet: true}
}

func (v NullableAdminProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


