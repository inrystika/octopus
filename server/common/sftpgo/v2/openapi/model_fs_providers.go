/*
SFTPGo

SFTPGo allows to securely share your files over SFTP, HTTP and optionally FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo allows to create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 

API version: 2.2.2-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// FsProviders Filesystem providers:   * `0` - Local filesystem   * `1` - S3 Compatible Object Storage   * `2` - Google Cloud Storage   * `3` - Azure Blob Storage   * `4` - Local filesystem encrypted   * `5` - SFTP 
type FsProviders int32

// List of FsProviders
const (
	FSPROVIDERS__0 FsProviders = 0
	FSPROVIDERS__1 FsProviders = 1
	FSPROVIDERS__2 FsProviders = 2
	FSPROVIDERS__3 FsProviders = 3
	FSPROVIDERS__4 FsProviders = 4
	FSPROVIDERS__5 FsProviders = 5
)

// All allowed values of FsProviders enum
var AllowedFsProvidersEnumValues = []FsProviders{
	0,
	1,
	2,
	3,
	4,
	5,
}

func (v *FsProviders) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FsProviders(value)
	for _, existing := range AllowedFsProvidersEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FsProviders", value)
}

// NewFsProvidersFromValue returns a pointer to a valid FsProviders
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFsProvidersFromValue(v int32) (*FsProviders, error) {
	ev := FsProviders(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FsProviders: valid values are %v", v, AllowedFsProvidersEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FsProviders) IsValid() bool {
	for _, existing := range AllowedFsProvidersEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FsProviders value
func (v FsProviders) Ptr() *FsProviders {
	return &v
}

type NullableFsProviders struct {
	value *FsProviders
	isSet bool
}

func (v NullableFsProviders) Get() *FsProviders {
	return v.value
}

func (v *NullableFsProviders) Set(val *FsProviders) {
	v.value = val
	v.isSet = true
}

func (v NullableFsProviders) IsSet() bool {
	return v.isSet
}

func (v *NullableFsProviders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFsProviders(val *FsProviders) *NullableFsProviders {
	return &NullableFsProviders{value: val, isSet: true}
}

func (v NullableFsProviders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFsProviders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

