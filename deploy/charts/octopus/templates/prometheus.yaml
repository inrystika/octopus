apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "prometheus.fullname" . }}
data:
  prometheus.yml: |
    global:
      scrape_interval:     15s
      evaluation_interval: 15s
    scrape_configs:
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics
    - job_name: 'kubernetes-cadvisor'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
    - job_name: 'kubernetes-service-endpoints'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: labelmap
        regex: __meta_kubernetes_pod_node_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name
    - job_name: 'kubernetes-services'
      kubernetes_sd_configs:
      - role: service
      metrics_path: /probe
      params:
        module: [http_2xx]
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
        action: keep
        regex: true
      - source_labels: [__address__]
        target_label: __param_target
      - target_label: __address__
        replacement: blackbox-exporter.example.com:9115
      - source_labels: [__param_target]
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        target_label: kubernetes_name
    - job_name: 'kubernetes-ingresses'
      kubernetes_sd_configs:
      - role: ingress
      relabel_configs:
      - source_labels: [__meta_kubernetes_ingress_annotation_prometheus_io_probe]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path]
        regex: (.+);(.+);(.+)
        replacement: ${1}://${2}${3}
        target_label: __param_target
      - target_label: __address__
        replacement: blackbox-exporter.example.com:9115
      - source_labels: [__param_target]
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_ingress_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_ingress_name]
        target_label: kubernetes_name
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ template "prometheus.fullname" . }}
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ template "prometheus.fullname" . }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ template "prometheus.fullname" . }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ template "prometheus.fullname" . }}
subjects:
  - kind: ServiceAccount
    name: {{ template "prometheus.fullname" . }}
    namespace: {{ .Release.Namespace }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "prometheus.fullname" . }}
  labels:
{{ include "prometheus.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.prometheus.replicaCount }}
  strategy:
    type: "Recreate"
  selector:
    matchLabels:
{{ include "prometheus.select-labels" . | indent 6 }}
  template:
    metadata:
      labels:
{{ include "prometheus.labels" . | indent 8 }}
    spec:
      nodeSelector:
      {{- with .Values.grafana.nodeSelector }}
      {{ toYaml . | indent 2 }}
      {{- end }}
      {{- with .Values.global.nodeSelector }}
      {{ toYaml . | indent 2 }}
      {{- end }}
      containers:
      - image: bitnami/prometheus:{{ .Values.prometheus.image.tag }}
        name: prometheus
        args:
        - "--config.file=/etc/prometheus/prometheus.yml"
        - "--storage.tsdb.path=/prometheus"
        - "--storage.tsdb.retention={{ .Values.prometheus.retentionDuration }}"
        ports:
        - containerPort: {{ .Values.prometheus.service.targetPort }}
          protocol: TCP
        volumeMounts:
        - mountPath: "/prometheus"
          name: data
        - mountPath: "/etc/prometheus"
          name: config-volume
        resources:
{{ toYaml .Values.prometheus.resources | indent 10 }}
      serviceAccountName: {{ template "prometheus.fullname" . }}
      securityContext:
        runAsUser: 0
      volumes:
      - name: data
{{- if .Values.prometheus.volumes.dataPath }}
        hostPath:
          path: {{ .Values.prometheus.volumes.dataPath }}
          type: DirectoryOrCreate
{{- else }}
          emptyDir: {}
{{- end }}
      - name: config-volume
        configMap:
          name: {{ template "prometheus.fullname" . }}
---
kind: Service
apiVersion: v1
metadata:
  name: {{ template "prometheus.fullname" . }}
  labels:
{{ include "prometheus.labels" . | indent 6 }}
spec:
  type: {{ .Values.prometheus.service.type }}
  ports:
  - port: {{ .Values.prometheus.service.port }}
    targetPort: {{ .Values.prometheus.service.targetPort }}
    nodePort: {{ .Values.prometheus.service.hostPort }}
  selector:
{{ include "prometheus.select-labels" . | indent 4 }}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "prometheus.fullname" . }}-gcu-exporter
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "prometheus.name" . }}-gcu-exporter
      app.kubernetes.io/instance: {{ template "prometheus.fullname" . }}-gcu-exporter
      app.kubernetes.io/part-of: {{ template "prometheus.name" . }}
  template:
    metadata:
      name: {{ template "prometheus.fullname" . }}-gcu-exporter
      labels:
{{ include "prometheus.common-labels" . | indent 8 }}
        app.kubernetes.io/name: {{ template "prometheus.name" . }}-gcu-exporter
        app.kubernetes.io/instance: {{ template "prometheus.fullname" . }}-gcu-exporter
        app.kubernetes.io/part-of: {{ template "prometheus.name" . }}
    spec:
      nodeSelector:
        hardware-type: ENFLAMEGCU
      containers:
        - image: {{ .Values.enflame.gcuExporterImage }}
          imagePullPolicy: IfNotPresent #Always
          name: pod-enflame-gcu-metrics-exporter
          resources:
            requests:
              memory: 100Mi
              cpu: 100m
            limits:
              memory: 2000Mi
              cpu: 2000m
          ports:
            - name: gcu-metrics
              containerPort: 9400
          securityContext:
            privileged: true
          volumeMounts:
            - name: pod-gcu-resources
              readOnly: true
              mountPath: /var/lib/kubelet/pod-resources
            - name: device-metrics
              readOnly: true
              mountPath: /run/prometheus
            - name: syspath
              mountPath: /sys
            - name: localtime
              mountPath: /etc/localtime
            - name: varlock
              mountPath: /var/lock
            - name: libefml
              mountPath: /usr/lib/libefml.so
            - name: libefml-real
              mountPath: /usr/local/efsmi
      volumes:
        - name: pod-gcu-resources
          hostPath:
            path: /var/lib/kubelet/pod-resources
        - name: device-metrics
          emptyDir:
            medium: Memory
        - name: syspath
          hostPath:
            path: /sys
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: varlock
          hostPath:
            path: /var/lock
        - name: libefml
          hostPath:
            path: /usr/lib/libefml.so
        - name: libefml-real
          hostPath:
            path: /usr/local/efsmi
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "prometheus.fullname" . }}-mlu-exporter
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "prometheus.name" . }}-mlu-exporter
      app.kubernetes.io/instance: {{ template "prometheus.fullname" . }}-mlu-exporter
      app.kubernetes.io/part-of: {{ template "prometheus.name" . }}
  template:
    metadata:
      name: {{ template "prometheus.fullname" . }}-mlu-exporter
      labels:
{{ include "prometheus.common-labels" . | indent 8 }}
        app.kubernetes.io/name: {{ template "prometheus.name" . }}-mlu-exporter
        app.kubernetes.io/instance: {{ template "prometheus.fullname" . }}-mlu-exporter
        app.kubernetes.io/part-of: {{ template "prometheus.name" . }}
    spec:
      nodeSelector:
        hardware-type: CAMBRICONMLU
      containers:
        - image: {{ .Values.cambricon.mluExporterImage }}
          imagePullPolicy: IfNotPresent #Always
          name: pod-cambricon-mlu-metrics-exporter
          command:
            - /usr/bin/mlu-exporter
          args:
            - --metrics-config=/etc/mlu-exporter/metrics.yaml
            - --metrics-path=/metrics
            - --port=9400
            - --collector=cndev
            - --collector=podresources
            - --metrics-prefix=mlu
          resources:
            requests:
              memory: 100Mi
              cpu: 100m
            limits:
              memory: 2000Mi
              cpu: 2000m
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /var/lib/kubelet/pod-resources/
              name: pod-resources
      hostPID: true
      hostIPC: true
      volumes:
        - name: pod-resources
          hostPath:
            path: /var/lib/kubelet/pod-resources/
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "prometheus.fullname" . }}-npu-exporter
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "prometheus.name" . }}-npu-exporter
      app.kubernetes.io/instance: {{ template "prometheus.fullname" . }}-npu-exporter
      app.kubernetes.io/part-of: {{ template "prometheus.name" . }}
  template:
    metadata:
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: runtime/default
      labels:
{{ include "prometheus.common-labels" . | indent 8 }}
        app.kubernetes.io/name: {{ template "prometheus.name" . }}-npu-exporter
        app.kubernetes.io/instance: {{ template "prometheus.fullname" . }}-npu-exporter
        app.kubernetes.io/part-of: {{ template "prometheus.name" . }}
    spec:
      nodeSelector:
        hardware-type: ASCENDNPU
      containers:
        - name: huawei-npu-exporter
          image: swr.cn-south-1.myhuaweicloud.com/openioctopus/npu-exporter:v5.0.RC1.1
          resources:
            requests:
              memory: 1000Mi
              cpu: 1000m
            limits:
              memory: 1000Mi
              cpu: 1000m
          imagePullPolicy: IfNotPresent
          command: [ "/bin/bash", "-c", "--"]
          # NOTE: enable HTTPS needs to use
          # ./cert-importer -certFile=../cert/rsa_aes.crt -keyFile=../cert/rsa_aes_private.key to import certificate
          # pair firstly
          args: [ "umask 027;npu-exporter -port=8082 -ip=0.0.0.0  -updateTime=5
                 -logFile=/var/log/mindx-dl/npu-exporter/npu-exporter.log -logLevel=0 -containerMode=docker" ]
          securityContext:
            privileged: true
            readOnlyRootFilesystem: true
            runAsUser: 0
            runAsGroup: 0
          ports:
            - name: http
              containerPort: 8082
              protocol: TCP
          volumeMounts:
            - name: log-npu-exporter
              mountPath: /var/log/mindx-dl/npu-exporter
            - name: localtime
              mountPath: /etc/localtime
              readOnly: true
            - name: ascend-driver
              mountPath: /usr/local/Ascend/driver
              readOnly: true
            - name: ascend-dcmi
              mountPath: /usr/local/dcmi
              readOnly: true
            - name: kmckeystore
              mountPath: /etc/mindx-dl
            - name: sys
              mountPath: /sys
              readOnly: true
            - name: docker-shim  # delete when only use containerd
              mountPath: /var/run/dockershim.sock
              readOnly: true
            - name: docker  # delete when only use containerd
              mountPath: /var/run/docker
              readOnly: true
            - name: containerd
              mountPath: /run/containerd
              readOnly: true
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: log-npu-exporter
          hostPath:
            path: /var/log/mindx-dl/npu-exporter
            type: DirectoryOrCreate
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: ascend-driver
          hostPath:
            path: /usr/local/Ascend/driver
        - name: ascend-dcmi
          hostPath:
            path: /usr/local/dcmi
        - name: kmckeystore
          hostPath:
            path: /etc/mindx-dl
        - name: sys
          hostPath:
            path: /sys
        - name: docker-shim # delete when only use containerd
          hostPath:
            path: /var/run/dockershim.sock
        - name: docker  # delete when only use containerd
          hostPath:
            path: /var/run/docker
        - name: containerd
          hostPath:
            path: /run/containerd
        - name: tmp
          hostPath:
            path: /tmp
---
kind: Service
apiVersion: v1
metadata:
  labels:
{{ include "prometheus.common-labels" . | indent 4 }}
    app.kubernetes.io/name: {{ template "prometheus.name" . }}-npu-exporter
    app.kubernetes.io/instance: {{ template "prometheus.fullname" . }}-npu-exporter
    app.kubernetes.io/part-of: {{ template "prometheus.name" . }}
  annotations:
    prometheus.io/port: "8082"
    prometheus.io/path: "/metrics"
    prometheus.io/scrape: "true"
  name: {{ template "prometheus.fullname" . }}-npu-exporter
spec:
  type: NodePort
  ports:
    - port: 8082
      targetPort: 8082
      nodePort: 30401
  selector:
    app.kubernetes.io/name: {{ template "prometheus.name" . }}-npu-exporter
    app.kubernetes.io/instance: {{ template "prometheus.fullname" . }}-npu-exporter
    app.kubernetes.io/part-of: {{ template "prometheus.name" . }}
---
kind: Service
apiVersion: v1
metadata:
  labels:
{{ include "prometheus.common-labels" . | indent 4 }}
    app.kubernetes.io/name: {{ template "prometheus.name" . }}-gcu-exporter
    app.kubernetes.io/instance: {{ template "prometheus.fullname" . }}-gcu-exporter
    app.kubernetes.io/part-of: {{ template "prometheus.name" . }}
  annotations:
    prometheus.io/port: "9400"
    prometheus.io/path: "/metrics"
    prometheus.io/scrape: "true"
  name: {{ template "prometheus.fullname" . }}-gcu-exporter
spec:
  type: NodePort
  ports:
    - port: 9400
      targetPort: 9400
      nodePort: 30402
  selector:
    app.kubernetes.io/name: {{ template "prometheus.name" . }}-gcu-exporter
    app.kubernetes.io/instance: {{ template "prometheus.fullname" . }}-gcu-exporter
    app.kubernetes.io/part-of: {{ template "prometheus.name" . }}
---
kind: Service
apiVersion: v1
metadata:
  labels:
{{ include "prometheus.common-labels" . | indent 4 }}
    app.kubernetes.io/name: {{ template "prometheus.name" . }}-mlu-exporter
    app.kubernetes.io/instance: {{ template "prometheus.fullname" . }}-mlu-exporter
    app.kubernetes.io/part-of: {{ template "prometheus.name" . }}
  annotations:
    prometheus.io/port: "9400"
    prometheus.io/path: "/metrics"
    prometheus.io/scrape: "true"
  name: {{ template "prometheus.fullname" . }}-mlu-exporter
spec:
  type: NodePort
  ports:
    - port: 9400
      targetPort: 9400
      nodePort: 30403
  selector:
    app.kubernetes.io/name: {{ template "prometheus.name" . }}-mlu-exporter
    app.kubernetes.io/instance: {{ template "prometheus.fullname" . }}-mlu-exporter
    app.kubernetes.io/part-of: {{ template "prometheus.name" . }}

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "prometheus.fullname" . }}-ix-exporter
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "prometheus.name" . }}-ix-exporter
      app.kubernetes.io/instance: {{ template "prometheus.fullname" . }}-ix-exporter
      app.kubernetes.io/part-of: {{ template "prometheus.name" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "prometheus.name" . }}-ix-exporter
        app.kubernetes.io/instance: {{ template "prometheus.fullname" . }}-ix-exporter
        app.kubernetes.io/part-of: {{ template "prometheus.name" . }}
      name: {{ template "prometheus.fullname" . }}-ix-exporter
    spec:
      nodeSelector:
        hardware-type: ILUVATARGPU
      containers:
        - image: "iluvatarcorex/ix-exporter:3.1.1"
          name: "ix-exporter"
          ports:
            - name: "metrics"
              containerPort: 32021
          securityContext:
            privileged: true
            runAsNonRoot: false
            runAsUser: 0
          volumeMounts:
            - name: "pod-resources"
              readOnly: true
              mountPath: "/var/lib/kubelet/pod-resources"
      volumes:
        - name: "pod-resources"
          hostPath:
            path: "/var/lib/kubelet/pod-resources"
---
kind: Service
apiVersion: v1
metadata:
  labels:
    app.kubernetes.io/name: {{ template "prometheus.name" . }}-ix-exporter
    app.kubernetes.io/instance: {{ template "prometheus.fullname" . }}-ix-exporter
    app.kubernetes.io/part-of: {{ template "prometheus.name" . }}
  annotations:
    prometheus.io/port: "32021"
    prometheus.io/path: "/metrics"
    prometheus.io/scrape: "true"
  name: {{ template "prometheus.fullname" . }}-ix-exporter
spec:
  type: NodePort
  ports:
    - port: 32021
      targetPort: 32021
      nodePort: 30404
  selector:
    app.kubernetes.io/name: {{ template "prometheus.name" . }}-ix-exporter
    app.kubernetes.io/instance: {{ template "prometheus.fullname" . }}-ix-exporter
    app.kubernetes.io/part-of: {{ template "prometheus.name" . }}